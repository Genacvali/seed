# SEED Agent Configuration
# Single configuration file for the entire monitoring system

# =============================================================================
# System Configuration
# =============================================================================
system:
  # Agent settings
  agent:
    bind_host: "0.0.0.0"
    bind_port: 8080
    workers: 2
    debug: false
    
  # Alert throttling
  alerts:
    ttl_seconds: 120         # Suppress duplicate alerts for N seconds
    max_retries: 3           # Maximum retry attempts for failed alerts
    retry_delay: 10          # Base retry delay in seconds (exponential backoff)

# =============================================================================
# Infrastructure Configuration  
# =============================================================================
infrastructure:
  # RabbitMQ settings
  rabbitmq:
    host: "rabbitmq"
    port: 5672
    username: "seed"
    password: "seed_password"
    vhost: "/"
    
    # Queue configuration
    queues:
      alerts: "seed.alerts"
      retry: "seed.alerts.retry" 
      dlq: "seed.alerts.dlq"
      
  # Redis settings (for throttling)
  redis:
    host: "redis"
    port: 6379
    db: 0
    password: null
    
  # Telegraf settings (for host inventory)
  telegraf:
    scheme: "http"
    port: 9216
    endpoint: "/metrics"
    timeout: 30

# =============================================================================
# LLM Configuration (for intelligent alert processing)
# =============================================================================
llm:
  enabled: true
  provider: "gigachat"  # gigachat, ollama, openai, anthropic
  
  # GigaChat settings (Sber AI)
  gigachat:
    client_id: "e719ac5a-2040-4977-afc7-e120230859ce"
    client_secret: "e974a550-bd43-4e05-954e-286599998ab0"
    scope: "GIGACHAT_API_PERS"
    oauth_url: "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    api_url: "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    model: "GigaChat-2"
    verify_ssl: false
    token_cache: "/app/logs/gigachat_token.json"
    timeout: 30
  
  # Ollama settings (local LLM) 
  ollama:
    base_url: "http://localhost:11434"
    model: "llama2:7b"
    timeout: 30
    
  # OpenAI settings (если используете)
  openai:
    api_key: "your-openai-api-key"
    model: "gpt-3.5-turbo"
    base_url: "https://api.openai.com/v1"
    
  # Prompt templates
  prompts:
    alert_analysis: |
      Ты - системный администратор, анализирующий мониторинговый алерт.
      
      Детали алерта:
      - Название: {alertname}
      - Критичность: {severity}
      - Инстанс: {instance}
      - Описание: {description}
      
      Предоставь:
      1. Краткое описание проблемы (1-2 предложения)
      2. Потенциальное влияние на пользователей/бизнес
      3. Рекомендуемые немедленные действия
      4. Анализ первопричины (если возможно)
      
      Отформатируй ответ ясным, практичным языком для команды эксплуатации.
      
    summary_generation: |
      Создай краткое резюме алерта для уведомления в Mattermost.
      Держи его в пределах 200 символов, но включай ключевые детали.
      Используй соответствующие эмодзи для уровня критичности.

# =============================================================================
# Notification Configuration
# =============================================================================
notifications:
  # Default notification settings
  default:
    enabled: true
    
  # Mattermost webhook
  mattermost:
    enabled: true
    webhook_url: "https://mm.sberdevices.ru/hooks/p5777ztncinjxbetyeanw3dwqa"
    channel: "alerts"
    username: "SEED-Agent"
    icon_emoji: ":robot_face:"
    verify_ssl: false
    
  # Slack webhook (alternative)
  slack:
    enabled: false
    webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    channel: "#alerts"
    username: "SEED-Agent"
    
  # Email notifications (SMTP)
  email:
    enabled: false
    smtp_host: "smtp.gmail.com"
    smtp_port: 587
    smtp_user: "your-email@gmail.com"
    smtp_password: "your-password"
    from_email: "seed-agent@yourcompany.com"
    to_emails:
      - "alerts@yourcompany.com"

# =============================================================================
# Host Groups Configuration
# =============================================================================
hosts:
  # Group-based host configuration
  groups:
    # Production MongoDB cluster
    mongo-prod:
      hosts:
        - "mongo-prod-01"
        - "mongo-prod-02" 
        - "mongo-prod-03"
      overrides:
        mongo_host: "mongo-prod-01"
        mongo_port: 27017
        username: "monitoring"
        password: "prod-secret"
        auth_db: "admin"
        telegraf_url: "http://{}:9216/metrics"
        
    # Staging MongoDB cluster  
    mongo-stage:
      hosts:
        - "mongo-stage-01"
        - "mongo-stage-02"
      overrides:
        mongo_host: "mongo-stage-01"
        mongo_port: 27017
        username: "monitoring"
        password: "stage-secret"
        auth_db: "admin"
        telegraf_url: "http://{}:9216/metrics"
        
    # Web servers
    web-servers:
      hosts:
        - "web-01"
        - "web-02"
        - "web-03"
      overrides:
        telegraf_url: "http://{}:9216/metrics"
        paths: ["/", "/var/www", "/opt"]

  # Individual host overrides
  individual:
    "special-host-01":
      telegraf_url: "https://special-host-01:9216/metrics"
      custom_setting: "special-value"

# =============================================================================
# Alert Routing Configuration
# =============================================================================
routing:
  # Alert name to plugin mapping with payloads
  alerts:
    
    # Disk space monitoring
    DiskSpaceHigh:
      plugin: "host_inventory"
      payload:
        paths: ["/", "/data", "/var", "/opt"]
        alert_type: "disk_space"
        priority: "high"
        timeout: 30
        
    DiskSpaceCritical:
      plugin: "host_inventory"
      payload:
        paths: ["/", "/data", "/var", "/opt"] 
        alert_type: "disk_critical"
        priority: "critical"
        timeout: 30
        
    # CPU and memory monitoring
    HighCpuLoad:
      plugin: "host_inventory"
      payload:
        paths: ["/"]
        alert_type: "cpu_load"
        priority: "warning"
        timeout: 30
        
    HighMemoryUsage:
      plugin: "host_inventory"
      payload:
        paths: ["/"]
        alert_type: "memory"
        priority: "warning"
        timeout: 30
        
    # General host inventory
    HostInventory:
      plugin: "host_inventory"
      payload:
        paths: ["/", "/data"]
        alert_type: "general"
        priority: "normal"
        timeout: 30
        
    # MongoDB performance monitoring
    MongoSlowQuery:
      plugin: "mongo_hot"
      payload:
        min_ms: 100
        limit: 15
        priority: "high"
        timeout: 30
        
    MongoCollscan:
      plugin: "mongo_hot" 
      payload:
        min_ms: 50
        limit: 10
        priority: "high"
        timeout: 30
        
    MongoHighConnections:
      plugin: "mongo_hot"
      payload:
        min_ms: 0
        limit: 20
        priority: "warning"
        timeout: 30

# =============================================================================
# Plugin-Specific Configuration
# =============================================================================
plugins:
  # Host inventory plugin settings
  host_inventory:
    default_paths: ["/", "/data"]
    default_timeout: 30
    telegraf_metrics:
      - "disk_used_percent"
      - "cpu_usage_idle"
      - "mem_used_percent"
      - "system_load1"
      
  # MongoDB hotspots plugin settings
  mongo_hot:
    default_min_ms: 50
    default_limit: 10
    connection_timeout: 10000
    profiler_enabled: true
    slow_op_sample_rate: 1.0
    
# =============================================================================
# Logging Configuration
# =============================================================================
logging:
  level: "INFO"               # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  # File logging
  file:
    enabled: true
    path: "/app/logs/seed-agent.log"
    max_size: "100MB"
    backup_count: 5
    
  # Console logging
  console:
    enabled: true
    colored: true
    
  # Structured logging (JSON)
  structured:
    enabled: false
    include_extra: true

# =============================================================================
# Health Check Configuration  
# =============================================================================
health:
  enabled: true
  interval: 60              # Health check interval in seconds
  
  checks:
    # RabbitMQ connectivity
    rabbitmq:
      enabled: true
      timeout: 5
      
    # Redis connectivity  
    redis:
      enabled: true
      timeout: 5
      
    # Plugin health
    plugins:
      enabled: true
      test_interval: 300    # Test plugins every 5 minutes
      
# =============================================================================
# Metrics and Monitoring
# =============================================================================  
metrics:
  enabled: true
  
  # Prometheus metrics endpoint
  prometheus:
    enabled: true
    path: "/metrics"
    
  # Internal metrics
  internal:
    alerts_processed: true
    plugin_execution_time: true
    queue_size: true
    error_count: true

# =============================================================================
# Development and Testing
# =============================================================================
development:
  # Enable development features
  debug_mode: false
  
  # Mock external services for testing
  mock_services:
    telegraf: false
    mongodb: false
    
  # Test data
  test_alerts: false
  test_interval: 300