version: '3.8'

services:
  # =============================================================================
  # Nginx - Reverse proxy with SSL termination
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: seed-nginx
    restart: unless-stopped
    
    # Port mapping - only expose HTTPS
    ports:
      - "80:80"     # Redirect to HTTPS
      - "443:443"   # HTTPS
      
    # Volume mounts
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      
    # Dependencies
    depends_on:
      - seed-agent
      
    # Health check
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      
    # Networks
    networks:
      - seed-network
      - seed-external

  # =============================================================================
  # SEED Agent - Main monitoring service  
  # =============================================================================
  seed-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seed-agent
    restart: unless-stopped
    
    # NO external ports - only internal network access
    expose:
      - "8080"
      
    # Environment variables from secrets
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - RABBITMQ_PASSWORD_FILE=/run/secrets/rabbitmq_password
      
    # Secrets
    secrets:
      - redis_password
      - rabbitmq_password
      
    # Volume mounts
    volumes:
      - ./seed.yaml:/app/seed.yaml:ro
      - ./plugins.py:/app/plugins.py:ro
      - ./logs:/app/logs
      
    # Dependencies
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
        
    # Health check - internal only
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
          
    # Internal network only
    networks:
      - seed-network

  # =============================================================================
  # RabbitMQ - Message queue service
  # =============================================================================
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: seed-rabbitmq
    restart: unless-stopped
    
    # Only expose management UI through nginx
    expose:
      - "5672"    # AMQP port - internal only
      - "15672"   # Management UI - internal only
      
    # Environment variables with secrets
    environment:
      - RABBITMQ_DEFAULT_USER=seed
      - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/rabbitmq_password
      - RABBITMQ_DEFAULT_VHOST=/
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,warning},{default,warning}]
      
    # Secrets
    secrets:
      - rabbitmq_password
      
    # Volume mounts
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      
    # Health check
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
          
    # Internal network only
    networks:
      - seed-network

  # =============================================================================
  # Redis - Caching and throttling service
  # =============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: seed-redis
    restart: unless-stopped
    
    # Internal port only
    expose:
      - "6379"
      
    # Command with auth and custom configuration
    command: >
      sh -c "redis-server 
      --requirepass $$(cat /run/secrets/redis_password)
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000"
    
    # Secrets
    secrets:
      - redis_password
      
    # Volume mounts
    volumes:
      - redis_data:/data
      
    # Health check with auth
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a $$(cat /run/secrets/redis_password) ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
          
    # Internal network only
    networks:
      - seed-network

  # =============================================================================
  # Prometheus - Metrics collection (optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: seed-prometheus
    restart: unless-stopped
    
    # Internal access only
    expose:
      - "9090"
      
    # Volume mounts
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
      
    # Command with configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=720h'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://your-domain.com/prometheus'
      
    # Dependencies
    depends_on:
      - seed-agent
      
    # Internal network only
    networks:
      - seed-network
    
    # Only start if metrics are enabled
    profiles:
      - metrics

  # =============================================================================
  # Grafana - Metrics visualization (optional)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: seed-grafana
    restart: unless-stopped
    
    # Internal access only
    expose:
      - "3000"
      
    # Environment variables with secrets
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://your-domain.com/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      
    # Secrets
    secrets:
      - grafana_password
      
    # Volume mounts
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
      
    # Dependencies
    depends_on:
      - prometheus
      
    # Internal network only
    networks:
      - seed-network
    
    # Only start if metrics are enabled
    profiles:
      - metrics

# =============================================================================
# Docker Secrets - Production credential management
# =============================================================================
secrets:
  redis_password:
    file: ./secrets/redis_password.txt
  rabbitmq_password:
    file: ./secrets/rabbitmq_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

# =============================================================================
# Networks
# =============================================================================
networks:
  # Internal network for services communication
  seed-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16
        
  # External network for nginx
  seed-external:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# =============================================================================
# Volumes with production settings
# =============================================================================
volumes:
  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/seed/data/rabbitmq
      
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/seed/data/redis
      
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/seed/data/prometheus
      
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/seed/data/grafana