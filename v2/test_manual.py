#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π —Ä—É—á–Ω–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
"""
import requests
import json
from datetime import datetime

def quick_test():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–ª–æ—É"""
    
    # 1. Health check
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health...")
    try:
        r = requests.get("http://localhost:8000/health", timeout=5)
        print(f"‚úÖ Health: {r.json()}")
    except Exception as e:
        print(f"‚ùå Health failed: {e}")
        return False
    
    # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞:")
    try:
        r = requests.get("http://localhost:8000/stats", timeout=5)
        stats_before = r.json()
        print(f"   –û—á–µ—Ä–µ–¥–∏: {stats_before.get('queues', {})}")
        print(f"   Throttling: {stats_before.get('throttle', {})}")
    except Exception as e:
        print(f"‚ùå Stats failed: {e}")
        return False
    
    # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
    print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ host_inventory...")
    
    alert_payload = {
        "alerts": [{
            "status": "firing",
            "labels": {
                "alertname": "host_inventory",
                "host": "quick-test-host",
                "instance": "quick-test-host:9216"
            },
            "annotations": {
                "summary": "Quick test alert for host inventory"
            },
            "startsAt": datetime.now().isoformat(),
            "generatorURL": "http://prometheus:9090/test"
        }]
    }
    
    try:
        r = requests.post("http://localhost:8000/alert", 
                         json=alert_payload, 
                         timeout=5)
        print(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {r.json()}")
    except Exception as e:
        print(f"‚ùå Alert send failed: {e}")
        return False
    
    # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É)
    print("\n‚è±Ô∏è –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É...")
    import time
    time.sleep(1)
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    try:
        r = requests.get("http://localhost:8000/stats", timeout=5)
        stats_after = r.json()
        print(f"   –û—á–µ—Ä–µ–¥–∏: {stats_after.get('queues', {})}")
        print(f"   Throttling: {stats_after.get('throttle', {})}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        before_queued = stats_before.get('queues', {}).get('alerts', {}).get('message_count', 0)
        after_queued = stats_after.get('queues', {}).get('alerts', {}).get('message_count', 0)
        
        if after_queued != before_queued:
            print(f"‚úÖ –ê–ª–µ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (–±—ã–ª–æ: {before_queued}, —Å—Ç–∞–ª–æ: {after_queued})")
        else:
            print(f"‚ö†Ô∏è  –û—á–µ—Ä–µ–¥—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ –∞–ª–µ—Ä—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
    except Exception as e:
        print(f"‚ùå Stats after failed: {e}")
        return False
    
    print("\nüéâ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    print("\nüí° –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–ª—å—à–µ:")
    print("   1. –õ–æ–≥–∏ worker'–∞: –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å '[WORKER] Alert processed successfully'")
    print("   2. Mattermost: –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–æ—Ä–∏ —Ö–æ—Å—Ç–∞")
    print("   3. RabbitMQ UI: http://localhost:15672")
    
    return True

if __name__ == "__main__":
    print("üöÄ === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ SEED v2 ===\n")
    
    if quick_test():
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - uvicorn app:app --reload")
        print("   - python worker.py") 
        print("   - docker-compose up -d rabbitmq redis")