# -*- coding: utf-8 -*-
import os
from typing import Dict, Any, List
from fetchers.telegraf import get_gauge
from core import config
from core.formatter import SEEDFormatter
from core.llm import GigaChat

def _fmt_gb(bytes_val: float) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ –ì–ë"""
    return bytes_val / (1024**3)

def _determine_system_situation(cpu_info: str, ram_info: str, 
                               disk_percentages: List[float]) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π"""
    max_disk = max(disk_percentages) if disk_percentages else 0
    
    if max_disk > 90:
        return "disk_critical"
    elif max_disk > 80:
        return "disk_warning"
    elif not disk_percentages or ram_info == "n/a":
        return "no_data"
    else:
        return "low_resources"


def run(host: str, labels: Dict[str,str], annotations: Dict[str,str], payload: Dict[str,Any]) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
    telegraf_url = payload.get("telegraf_url") or config.default_telegraf_url(host)
    paths: List[str] = payload.get("paths") or ["/", "/data"]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        load1 = get_gauge(host, "system_load1", telegraf_url=telegraf_url)
        load5 = get_gauge(host, "system_load5", telegraf_url=telegraf_url)
        ncpu = get_gauge(host, "system_n_cpus", telegraf_url=telegraf_url)
        
        if isinstance(load1, float) or isinstance(load5, float):
            if isinstance(ncpu, float):
                cpu_info = f"{int(ncpu)} cores ‚Ä¢ LA: {load1 or 0:.2f}/{load5 or 0:.2f}"
            else:
                cpu_info = f"LA: {load1 or 0:.2f}/{load5 or 0:.2f}"
        else:
            cpu_info = "n/a"

        # –ü–æ–ª—É—á–∞–µ–º RAM –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é  
        mem_total = get_gauge(host, "mem_total", telegraf_url=telegraf_url)
        mem_avail = get_gauge(host, "mem_available", telegraf_url=telegraf_url)
        
        if isinstance(mem_total, float) and isinstance(mem_avail, float):
            mem_used = mem_total - mem_avail
            mem_used_gb = _fmt_gb(mem_used)
            mem_total_gb = _fmt_gb(mem_total)
            ram_info = f"{mem_used_gb:.1f} GB / {mem_total_gb:.1f} GB"
        else:
            ram_info = "n/a"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö
        disk_info = []
        disk_percentages = []
        
        for path in paths:
            used_pct = get_gauge(host, "disk_used_percent", labels={"path": path}, telegraf_url=telegraf_url)
            used = get_gauge(host, "disk_used", labels={"path": path}, telegraf_url=telegraf_url)
            total = get_gauge(host, "disk_total", labels={"path": path}, telegraf_url=telegraf_url)
            
            if isinstance(used_pct, float) and isinstance(used, float) and isinstance(total, float):
                used_gb = _fmt_gb(used)
                total_gb = _fmt_gb(total)
                disk_info.append(SEEDFormatter.disk_status(path, used_gb, total_gb, used_pct))
                disk_percentages.append(used_pct)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        result = SEEDFormatter.system_summary(cpu_info, ram_info, disk_info, host)
        
        # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç LLM
        llm_advice = _get_llm_advice(cpu_info, ram_info, disk_percentages, host)
        if llm_advice:
            result += f"\nü§ñ –£–º–Ω—ã–π —Å–æ–≤–µ—Ç:\n  ‚Ä¢ {llm_advice}"
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
            situation = _determine_system_situation(cpu_info, ram_info, disk_percentages)
            advice = SEEDFormatter.friendly_advice(situation, host)
            result += advice
        
        return result

    except Exception as e:
        return SEEDFormatter.error_message(str(e), f"–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–∞ {host}")

def _get_llm_advice(cpu_info: str, ram_info: str, disk_percentages: List[float], host: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if os.getenv("USE_LLM", "0") != "1":
            return ""
            
        max_disk = max(disk_percentages) if disk_percentages else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        context_parts = []
        if cpu_info != "n/a":
            context_parts.append(f"CPU: {cpu_info}")
        if ram_info != "n/a":
            context_parts.append(f"Memory: {ram_info}")
        if disk_percentages:
            context_parts.append(f"Max disk usage: {max_disk:.1f}%")
            
        context = ", ".join(context_parts)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–ª–µ–º—ã
        if max_disk > 90:
            problem_level = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞"
        elif max_disk > 80:
            problem_level = "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏—Å–∫–∞"
        else:
            problem_level = "–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"
            
        prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π DevOps –∏–Ω–∂–µ–Ω–µ—Ä. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ {host}.

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {context}
–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: {problem_level}

–î–∞–π –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π Linux (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). 
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑."""

        llm = GigaChat()
        advice = llm.ask(prompt, max_tokens=80).strip()
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ
        advice = " ".join(advice.split())
        if len(advice) > 200:
            advice = advice[:200] + "..."
            
        return advice
        
    except Exception as e:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ LLM –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É - –±—É–¥–µ—Ç fallback
        return ""
