# -*- coding: utf-8 -*-
"""
MongoDB Performance Analysis Plugin
S.E.E.D. - Smart Event Explainer & Diagnostics
"""
import os
from typing import Dict, Any, List
from core.formatter import SEEDFormatter

def run(host: str, labels: Dict[str,str], annotations: Dict[str,str], payload: Dict[str,Any]) -> str:
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MongoDB"""
    try:
        threshold = int(payload.get("min_ms", 50))
        limit = int(payload.get("limit", 10))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        ns = labels.get("ns") or labels.get("namespace") or "unknown.collection"
        duration = labels.get("durationMillis") or annotations.get("duration", "n/a")
        docs_examined = labels.get("docsExamined") or "n/a" 
        keys_examined = labels.get("keysExamined") or "n/a"
        plan_summary = labels.get("planSummary") or "UNKNOWN"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        result = SEEDFormatter.header("MongoDB Analysis", host)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        result += f"üéØ Collection: {ns}\n"
        result += f"‚è±Ô∏è Duration: {duration} ms\n"
        result += f"üìÑ Documents: {docs_examined}\n"
        result += f"üîë Keys: {keys_examined}\n"
        result += f"üìã Plan: {plan_summary}\n\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏
        try:
            duration_val = float(duration) if duration != "n/a" else 0
            docs_val = float(docs_examined) if docs_examined != "n/a" else 0
        except:
            duration_val = docs_val = 0
            
        if duration_val > 1000 or docs_val > 100000:
            status_msg = "üî• Critical performance issue detected"
        elif duration_val > 500 or docs_val > 10000:
            status_msg = "‚ö†Ô∏è Performance degradation detected"
        else:
            status_msg = "‚úÖ Query performance within acceptable range"
            
        result += f"{status_msg}\n\n"
        
        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –æ—Ç DBA
        advice = _get_mongo_advice(plan_summary, duration_val, docs_val, ns)
        result += SEEDFormatter.advice_section(advice)
        
        return result
        
    except Exception as e:
        return SEEDFormatter.error_message(str(e), f"–∞–Ω–∞–ª–∏–∑ MongoDB –Ω–∞ {host}")

def _get_mongo_advice(plan: str, duration: float, docs: float, namespace: str) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã DBA"""
    advice = []
    
    if "COLLSCAN" in plan:
        advice.append("üîç Collection scan detected - —Å–æ–∑–¥–∞–π—Ç–µ –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        advice.append(f"üìù –ö–æ–º–∞–Ω–¥–∞: db.{namespace.split('.')[-1]}.createIndex({{field: 1}})")
        
    if duration > 1000:
        advice.append("üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        advice.append("‚ö° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞")
        
    if docs > 50000:
        advice.append("üìä –°–∫–∞–Ω–∏—Ä—É–µ—Ç—Å—è –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")  
        advice.append("üéØ –î–æ–±–∞–≤—å—Ç–µ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
        
    if not advice:
        advice.append("‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–∏–µ–º–ª–µ–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
        advice.append("üìà –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
    return advice
