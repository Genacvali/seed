# Исходный конфиг + добавление мониторинга MongoDB логов для COLLSCAN

[[inputs.mongodb]]
  servers = ["mongodb://zabbix:zabbix@centos-s-1vcpu-512mb-10gb-fra1-01:27017/?connect=direct"]
  gather_perdb_stats = true
  gather_col_stats = false

[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false

[[inputs.net]]
  interfaces = ["eth*", "enp0s[0-1]", "lo"]

[[inputs.nstat]]
  proc_net_netstat = "/proc/net/netstat"
  proc_net_snmp = "/proc/net/snmp"
  proc_net_snmp6 = "/proc/net/snmp6"
  dump_zeros = true

[[inputs.processes]]

[[inputs.mem]]

[[inputs.diskio]]

[[inputs.disk]]
  mount_points = ["/", "/data"]

[[inputs.system]]

[[inputs.procstat]]
  pattern = "."
  pid_tag = true
  pid_finder = "native"
  fieldpass = ["cpu_time_user", "cpu_usage", "memory_rss"]

# ===============================================
# НОВЫЙ БЛОК: Мониторинг MongoDB логов на COLLSCAN
# ===============================================

# 1. Мониторинг MongoDB лог файла через tail
[[inputs.tail]]
  files = ["/var/log/mongodb/mongod.log", "/var/lib/mongodb/mongod.log", "/opt/mongo/logs/mongod.log"]
  from_beginning = false
  pipe = false
  watch_method = "inotify"
  
  # Фильтруем только строки с COLLSCAN, planSummary и медленными запросами
  name_suffix = "_mongodb_slow"
  
  # Парсим JSON логи MongoDB (если используется JSON формат)
  data_format = "grok"
  grok_patterns = [
    # Для JSON логов MongoDB 4.4+
    '%{TIMESTAMP_ISO8601:timestamp}.*"planSummary":"COLLSCAN".*"durationMillis":%{NUMBER:duration_ms:int}.*"ns":"%{DATA:namespace}".*"command":%{GREEDYDATA:command_json}',
    # Для текстовых логов MongoDB
    '%{TIMESTAMP_ISO8601:timestamp}.*COLLSCAN.*ns:%{DATA:namespace}.*(\w+)ms.*planSummary:\s*COLLSCAN.*',
    # Общий паттерн для медленных запросов
    '%{TIMESTAMP_ISO8601:timestamp}.*slow operation.*"durationMillis":%{NUMBER:duration_ms:int}.*"ns":"%{DATA:namespace}".*'
  ]
  
  # Добавляем теги
  [inputs.tail.tags]
    log_type = "mongodb"
    alert_type = "collscan"
    host = "centos-s-1vcpu-512mb-10gb-fra1-01"

# 2. Альтернативный подход через logparser для более гибкого парсинга
[[inputs.logparser]]
  files = ["/var/log/mongodb/mongod.log"]
  from_beginning = false
  watch_method = "inotify"
  
  # Парсим медленные операции MongoDB
  [inputs.logparser.grok]
    patterns = [
      # MongoDB 4.4+ JSON format
      '%{TIMESTAMP_ISO8601:timestamp}.*"attr":\{"type":"%{WORD:op_type}","ns":"%{DATA:namespace}".*"durationMillis":%{NUMBER:duration_ms:int}.*"planSummary":\[?"?%{DATA:plan_summary}"?\]?.*',
      # Старый текстовый формат
      '%{TIMESTAMP_ISO8601:timestamp}.*%{WORD:severity}.*%{WORD:op_type}.*ns:%{DATA:namespace}.*%{NUMBER:duration_ms:int}ms.*planSummary:\s*%{DATA:plan_summary}'
    ]
    measurement = "mongodb_operations"
    
  # Фильтры
  [inputs.logparser.tags]
    log_source = "mongod"
    host = "centos-s-1vcpu-512mb-10gb-fra1-01"

# 3. Exec плагин для активного поиска COLLSCAN в логах (fallback)
[[inputs.exec]]
  commands = [
    "bash -c 'tail -n 100 /var/log/mongodb/mongod.log 2>/dev/null | grep -i collscan | tail -5 || echo \"no_collscan_found\"'"
  ]
  timeout = "10s"
  interval = "30s"
  name_suffix = "_collscan_check"
  data_format = "value"
  data_type = "string"
  
  [inputs.exec.tags]
    check_type = "mongodb_collscan"
    host = "centos-s-1vcpu-512mb-10gb-fra1-01"

# ===============================================

# Процессоры для обработки данных
[[processors.topk]]
  namepass = ["*procstat*"]
  group_by = ["pid"]
  fields = ["cpu_time_user", "cpu_usage", "memory_rss"]
  k = 5

# Фильтр для MongoDB медленных операций
[[processors.converter]]
  namepass = ["mongodb_operations"]
  
  # Конвертируем duration_ms в число
  [processors.converter.fields]
    integer = ["duration_ms"]
    
  # Добавляем тег для алертинга если операция медленная
  [processors.converter.tags]
    slow_query = "false"
    
# Условный процессор для маркировки медленных запросов
[[processors.regex]]
  namepass = ["mongodb_operations"]
  
  # Если duration_ms > 100, помечаем как медленный
  [[processors.regex.tags]]
    key = "slow_query"  
    pattern = ".*"
    replacement = "${1}"
    result_key = "slow_query"

# Prometheus вывод
[[outputs.prometheus_client]]
  listen = ":9216"
  collectors_exclude = ["gocollector","process"]
  metric_version = 2

# Дополнительно: логирование в файл для отладки
[[outputs.file]]
  files = ["/var/log/telegraf-mongodb.log"]
  namepass = ["*mongodb*", "*collscan*"]
  data_format = "json"