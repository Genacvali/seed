#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ RabbitMQ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import asyncio
import json
import requests
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://localhost:8000"
STATS_URL = f"{API_URL}/stats"
ALERT_URL = f"{API_URL}/alert"

def test_alert_payload(alertname: str, host: str = "test-host", **extra_labels):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    labels = {
        "alertname": alertname,
        "host": host,
        "instance": f"{host}:27017",
        **extra_labels
    }
    
    annotations = {
        "summary": f"Test alert {alertname} on {host}",
        "description": f"This is a test alert for demonstration purposes"
    }
    
    # –î–ª—è mongo_collscan –¥–æ–±–∞–≤–∏–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if alertname == "mongo_collscan":
        annotations.update({
            "hotspots": """namespace                   op       time     details
----------------------------------------------------------
mydb.users                 find     1250ms   plan:COLLSCAN
mydb.orders                find      890ms   plan:COLLSCAN
mydb.products              find      670ms   plan:COLLSCAN""",
            "last_ts": datetime.now().isoformat()
        })
        labels.update({
            "db": "mydb",
            "ns": "mydb.users",
            "millis": "1250"
        })
    
    return {
        "alerts": [{
            "status": "firing",
            "labels": labels,
            "annotations": annotations,
            "startsAt": datetime.now().isoformat(),
            "endsAt": "0001-01-01T00:00:00Z",
            "generatorURL": f"http://prometheus:9090/graph?g0.expr=up%7Binstance%3D%22{host}%22%7D"
        }]
    }

def send_test_alert(alertname: str, host: str = "test-host", **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    payload = test_alert_payload(alertname, host, **kwargs)
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç: {alertname} –¥–ª—è {host}")
    
    try:
        response = requests.post(ALERT_URL, json=payload, timeout=5)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {result}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        response = requests.get(STATS_URL, timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ stats: {e}")
        return None

def print_stats():
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    stats = get_stats()
    if not stats:
        return
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    print(f"   –í—Ä–µ–º—è: {datetime.fromtimestamp(stats.get('time', 0))}")
    
    # Throttling stats
    throttle = stats.get('throttle', {})
    print(f"   Throttling: {throttle.get('backend', 'unknown')} backend")
    print(f"   –ü–æ–¥–∞–≤–ª–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {throttle.get('suppressed_count', 0)}")
    print(f"   Redis –ø–æ–¥–∫–ª—é—á–µ–Ω: {throttle.get('redis_connected', False)}")
    
    # Queue stats
    queues = stats.get('queues', {})
    if isinstance(queues, dict) and 'error' not in queues:
        print("   –û—á–µ—Ä–µ–¥–∏:")
        for name, info in queues.items():
            print(f"     {name}: {info.get('message_count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        print(f"   –û—á–µ—Ä–µ–¥–∏: {queues}")

def demo_basic_flow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    print("\nüé≠ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ê–ó–û–í–û–ì–û –ü–û–¢–û–ö–ê ===")
    
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print_stats()
    
    print("\n2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç host_inventory:")
    send_test_alert("host_inventory", "demo-server-01")
    
    print("\n3Ô∏è‚É£ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    time.sleep(2)
    print_stats()
    
    print("\n4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç mongo_collscan:")
    send_test_alert("mongo_collscan", "mongo-prod-01")
    
    print("\n5Ô∏è‚É£ –ñ–¥–µ–º –µ—â–µ 2 —Å–µ–∫—É–Ω–¥—ã...")
    time.sleep(2)
    print_stats()
    
    print("\n6Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ –∞–ª–µ—Ä—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∞–≤–ª–µ–Ω):")
    send_test_alert("mongo_collscan", "mongo-prod-01")
    
    print("\n7Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    time.sleep(1)
    print_stats()

def demo_throttling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è throttling –º–µ—Ö–∞–Ω–∏–∑–º–∞"""
    print("\nüõ°Ô∏è  === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø THROTTLING ===")
    
    host = "throttle-test-host"
    
    print(f"\n1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–∞ –¥–ª—è {host}:")
    for i in range(3):
        print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}:")
        send_test_alert("host_inventory", host)
        time.sleep(0.5)
    
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É throttling:")
    print_stats()
    
    print(f"\n3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ö–æ—Å—Ç–∞ (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏):")
    send_test_alert("host_inventory", "another-host")
    
    print("\n4Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    time.sleep(1)
    print_stats()

def demo_multiple_alerts():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    print("\nüöÄ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ê–°–°–û–í–û–ô –û–ë–†–ê–ë–û–¢–ö–ò ===")
    
    hosts = ["server-01", "server-02", "server-03", "db-01", "db-02"]
    alerts = ["host_inventory", "mongo_collscan"]
    
    print(f"\n1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(hosts) * len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ:")
    
    for host in hosts:
        for alert in alerts:
            send_test_alert(alert, host)
    
    print("\n2Ô∏è‚É£ –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    time.sleep(3)
    
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏:")
    print_stats()

def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{API_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SEED v2 RabbitMQ INTEGRATION ===")
    
    if not health_check():
        print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—â–µ–Ω—ã:")
        print("   - uvicorn app:app --reload")
        print("   - python worker.py")
        print("   - docker-compose up -d rabbitmq redis")
        return
    
    try:
        demo_basic_flow()
        demo_throttling()
        demo_multiple_alerts()
        
        print("\nüéâ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
        print("\n–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
        print("   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:8000/stats")
        print("   - RabbitMQ UI: http://localhost:15672 (guest/guest)")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    main()