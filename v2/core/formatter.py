# -*- coding: utf-8 -*-
"""
SEED Agent Formatter - Final Fantasy Style
–°—Ç–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥—É—Ö–µ FF —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
"""
import random
from typing import Dict, Any, List

class SEEDFormatter:
    """S.E.E.D. - Smart Event Explainer & Diagnostics Formatter"""
    
    STATUS_ICONS = {
        "ok": "‚úì",
        "warning": "‚ö†", 
        "critical": "‚úó",
        "info": "‚Ñπ"
    }
    
    ADVICE_STARTERS = [
        "üí° –°–æ–≤–µ—Ç:",
        "‚ö° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", 
        "üîß –î–µ–π—Å—Ç–≤–∏–µ:"
    ]
    
    @classmethod
    def header(cls, title: str, host: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ S.E.E.D."""
        return f"*S.E.E.D. {title} @ {host}*\n"
    
    @classmethod 
    def status_line(cls, label: str, value: str, status: str = "info", 
                   show_bar: bool = False, percentage: float = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–∫–æ–Ω–∫–æ–π"""
        icon = cls.STATUS_ICONS.get(status, "‚Ä¢")
        
        if show_bar and percentage is not None:
            bar = cls._create_progress_bar(percentage)
            return f"{icon} *{label}:* {value} {bar}"
        else:
            return f"{icon} *{label}:* {value}"
    
    @classmethod
    def _create_progress_bar(cls, percentage: float, length: int = 10) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if percentage < 50:
            fill_char = "="
        elif percentage < 80:
            fill_char = "-" 
        else:
            fill_char = "#"
            
        empty_char = "."
        filled = int((percentage / 100) * length)
        empty = length - filled
        
        return f"[{''.join([fill_char] * filled)}{''.join([empty_char] * empty)}]"
    
    @classmethod
    def advice_section(cls, advice_list: List[str]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å —Å–æ–≤–µ—Ç–∞–º–∏"""
        if not advice_list:
            return ""
            
        starter = random.choice(cls.ADVICE_STARTERS)
        advice_text = "\n".join([f"  ‚Ä¢ {advice}" for advice in advice_list])
        
        return f"\n{starter}\n{advice_text}"
    
    @classmethod
    def disk_status(cls, path: str, used_gb: float, total_gb: float, 
                   percentage: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ"""
        if percentage > 90:
            icon = cls.STATUS_ICONS["critical"]
        elif percentage > 80:
            icon = cls.STATUS_ICONS["warning"]
        else:
            icon = cls.STATUS_ICONS["ok"]
            
        bar = cls._create_progress_bar(percentage)
        return f"{icon} {path}: {percentage:.0f}% ({used_gb:.1f}/{total_gb:.1f} GB) {bar}"
    
    @classmethod
    def system_summary(cls, cpu_info: str, ram_info: str, disk_info: List[str],
                      host: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        header = cls.header("System Status", host)
        
        lines = [header]
        
        # CPU
        if cpu_info and cpu_info != "n/a":
            lines.append(f"CPU: {cpu_info}")
        else:
            lines.append(f"CPU: n/a")
            
        # RAM 
        if ram_info and ram_info != "n/a":
            lines.append(f"Memory: {ram_info}")
        else:
            lines.append(f"Memory: n/a")
            
        # –î–∏—Å–∫–∏
        if disk_info:
            lines.append(f"Disks:")
            for disk in disk_info:
                lines.append(f"  {disk}")
        else:
            lines.append(f"Disks: n/a")
            
        return "\n".join(lines)
    
    @classmethod
    def friendly_advice(cls, situation: str, host: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏"""
        advice_map = {
            "disk_critical": [
                "–ö—Ä–∏—Ç–∏—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                "–û—á–∏—Å—Ç–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏: find /var/log -name '*.log' -mtime +7 -delete", 
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
            ],
            "disk_warning": [
                "–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è - –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä—ã: du -sh /* | sort -hr", 
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∏—Å–∫–∞"
            ],
            "low_resources": [
                "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ",
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"
            ],
            "no_data": [
                f"Telegraf –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {host} - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–∏—Å telegraf –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
            ]
        }
        
        advice_list = advice_map.get(situation, ["–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —à—Ç–∞—Ç–Ω–æ"])
        return cls.advice_section(advice_list)
    
    @classmethod
    def error_message(cls, error: str, context: str = "") -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""        
        msg = f"*S.E.E.D. Error*\n\n"
        msg += f"Details: {error}\n"
        
        if context:
            msg += f"Context: {context}\n"
            
        msg += "\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        
        return msg