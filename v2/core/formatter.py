# -*- coding: utf-8 -*-
"""
SEED Agent Formatter - Final Fantasy Style
–°—Ç–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥—É—Ö–µ FF —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
"""
import random
from typing import Dict, Any, List

class FFFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –≤ —Å—Ç–∏–ª–µ Final Fantasy"""
    
    # –°–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏ –≤ —Å—Ç–∏–ª–µ FF
    CRYSTAL_ICONS = ["üíé", "üí†", "üîÆ", "‚ú®", "‚≠ê"]
    STATUS_ICONS = {
        "ok": "‚úÖ",
        "warning": "‚ö†Ô∏è", 
        "critical": "üî•",
        "info": "‚ÑπÔ∏è",
        "magic": "ü™Ñ"
    }
    
    # –§—Ä–∞–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –≤ —Å—Ç–∏–ª–µ –æ–ø—ã—Ç–Ω–æ–≥–æ –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    GREETING_PHRASES = [
        "–ö—Ä–∏—Å—Ç–∞–ª–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üíé",
        "–°–∏—Å—Ç–µ–º–∞ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç —Å–æ–±—ã—Ç–∏–π... ‚ú®",
        "–ú–∞–≥–∏—è DevOps –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç—Å—è! ü™Ñ",
        "–î—Ä–µ–≤–Ω–∏–µ —Ä—É–Ω—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ–≤–æ—Ä—è—Ç..."
    ]
    
    ADVICE_STARTERS = [
        "üí° *–°–æ–≤–µ—Ç –æ—Ç –±—ã–≤–∞–ª–æ–≥–æ –∞–¥–º–∏–Ω–∞:*",
        "üéØ *–ú—É–¥—Ä–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –≥–ª–∞—Å–∏—Ç:*", 
        "‚ö° *–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:*",
        "üîß *–î—Ä–µ–≤–Ω—è—è —Ç–µ—Ö–Ω–∏–∫–∞ SRE:*"
    ]
    
    @classmethod
    def header(cls, title: str, host: str, icon: str = "üíé") -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç–∏–ª–µ FF"""
        crystal = random.choice(cls.CRYSTAL_ICONS)
        return f"*{crystal} {title} @ {host} {crystal}*\n"
    
    @classmethod 
    def status_line(cls, label: str, value: str, status: str = "info", 
                   show_bar: bool = False, percentage: float = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–∫–æ–Ω–∫–æ–π"""
        icon = cls.STATUS_ICONS.get(status, "‚Ä¢")
        
        if show_bar and percentage is not None:
            bar = cls._create_progress_bar(percentage)
            return f"{icon} *{label}:* {value} {bar}"
        else:
            return f"{icon} *{label}:* {value}"
    
    @classmethod
    def _create_progress_bar(cls, percentage: float, length: int = 8) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ —Å—Ç–∏–ª–µ FF"""
        if percentage < 50:
            fill_char = "üü¢"
        elif percentage < 80:
            fill_char = "üü°" 
        else:
            fill_char = "üî¥"
            
        empty_char = "‚¨ú"
        filled = int((percentage / 100) * length)
        empty = length - filled
        
        return f"[{''.join([fill_char] * filled)}{''.join([empty_char] * empty)}]"
    
    @classmethod
    def advice_section(cls, advice_list: List[str]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å —Å–æ–≤–µ—Ç–∞–º–∏"""
        if not advice_list:
            return ""
            
        starter = random.choice(cls.ADVICE_STARTERS)
        advice_text = "\n".join([f"  ‚Ä¢ {advice}" for advice in advice_list])
        
        return f"\n{starter}\n{advice_text}"
    
    @classmethod
    def disk_status(cls, path: str, used_gb: float, total_gb: float, 
                   percentage: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ"""
        if percentage > 90:
            status = "critical"
            icon = "üî•"
        elif percentage > 80:
            status = "warning" 
            icon = "‚ö†Ô∏è"
        else:
            status = "ok"
            icon = "‚úÖ"
            
        bar = cls._create_progress_bar(percentage)
        return f"{icon} *{path}* {percentage:.0f}% ({used_gb:.1f} GB / {total_gb:.1f} GB) {bar}"
    
    @classmethod
    def system_summary(cls, cpu_info: str, ram_info: str, disk_info: List[str],
                      host: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        header = cls.header("System Crystal Status", host, "üíé")
        
        lines = [header]
        
        # CPU —Å –º–∞–≥–∏—á–µ—Å–∫–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π
        if cpu_info and cpu_info != "n/a":
            lines.append(f"‚ö° *Mana Cores:* {cpu_info}")
        else:
            lines.append(f"üí§ *Mana Cores:* –≤ —Ä–µ–∂–∏–º–µ —Å–Ω–∞...")
            
        # RAM 
        if ram_info and ram_info != "n/a":
            lines.append(f"üßô‚Äç‚ôÇÔ∏è *Memory Crystal:* {ram_info}")
        else:
            lines.append(f"‚ùì *Memory Crystal:* —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
        # –î–∏—Å–∫–∏
        if disk_info:
            lines.append(f"üíæ *Storage Vaults:*")
            for disk in disk_info:
                lines.append(f"    {disk}")
        else:
            lines.append(f"üíæ *Storage Vaults:* –∏—Å—Å–ª–µ–¥—É—é—Ç—Å—è...")
            
        return "\n".join(lines)
    
    @classmethod
    def friendly_advice(cls, situation: str, host: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏"""
        advice_map = {
            "disk_critical": [
                "–ü–æ—Ä–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ! –£–¥–∞–ª–∏ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∏—Å–∫–∞", 
                "–ù–∞—Å—Ç—Ä–æ–π —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ - —ç—Ç–æ —Å–ø–∞—Å–µ—Ç —Ç–µ–±—è –≤ –±—É–¥—É—â–µ–º"
            ],
            "disk_warning": [
                "–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è, –Ω–æ –ø–∞–Ω–∏–∫–∏ –Ω–µ—Ç - —É –Ω–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è",
                "–ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–µ—Å—Ç–∞: du -sh /*", 
                "–ú–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É?"
            ],
            "low_resources": [
                "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ - –≤—Å–µ —Å–ø–æ–∫–æ–π–Ω–æ",
                "–ú–æ–Ω–∏—Ç–æ—Ä—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ",
                "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–µ—Å—É—Ä—Å–æ–≤!"
            ],
            "no_data": [
                f"Telegraf –Ω–∞ {host} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                "–í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                "–ù–µ –≤–æ–ª–Ω—É–π—Å—è, –∫–∞–∫ –Ω–∞–ª–∞–¥–∏–º —Å–≤—è–∑—å - –¥–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è"
            ]
        }
        
        advice_list = advice_map.get(situation, ["–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —à—Ç–∞—Ç–Ω–æ"])
        return cls.advice_section(advice_list)
    
    @classmethod
    def error_message(cls, error: str, context: str = "") -> str:
        """–î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        crystal = random.choice(cls.CRYSTAL_ICONS)
        
        msg = f"{crystal} *–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...*\n\n"
        msg += f"üîç *–î–µ—Ç–∞–ª–∏:* {error}\n"
        
        if context:
            msg += f"üìç *–ö–æ–Ω—Ç–µ–∫—Å—Ç:* {context}\n"
            
        msg += "\nüí° *–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π:* —è —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!"
        msg += "\nü§ñ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è - –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –∏–ª–∏ –ø–∏–Ω–≥–∞–Ω–∏ –∞–¥–º–∏–Ω–∞"
        
        return msg