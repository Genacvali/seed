#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB COLLSCAN –¥–µ—Ç–µ–∫—Ü–∏–∏
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ COLLSCAN –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–∞—Ä—Å–∏—Ç –ª–æ–≥–∏ MongoDB
"""
import json
import requests
import re
import subprocess
import time
from datetime import datetime
from pymongo import MongoClient
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ main()
MONGO_URI = None
MONGO_LOG_PATH = "/var/log/mongodb/mongod.log"
SEED_URL = "http://127.0.0.1:8000/alert"
DB_NAME = "seed_demo"

def create_test_data():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    client = MongoClient(MONGO_URI)
    db = client[DB_NAME]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if db.users.count_documents({}) > 1000:
        print(f"üìä –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å: {db.users.count_documents({})} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return
    
    print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    users = []
    for i in range(5000):
        users.append({
            "name": f"User{i}",
            "email": f"user{i}@test.com",
            "age": 18 + (i % 60),
            "city": f"City{i % 50}",
            "status": ["active", "inactive", "pending"][i % 3],
            "created": datetime.utcnow()
        })
    
    db.users.insert_many(users)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(users)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

def generate_collscan_queries():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –≤—ã–∑–æ–≤—É—Ç COLLSCAN"""
    client = MongoClient(MONGO_URI)
    db = client[DB_NAME]
    
    print("üî• –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º COLLSCAN –∑–∞–ø—Ä–æ—Å—ã...")
    
    queries = [
        # –ü–æ–∏—Å–∫ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
        {"age": {"$gt": 50}},
        {"email": "user1000@test.com"},
        {"city": "City1", "status": "active"},
        {"name": {"$regex": "User1.*"}},
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞
        {"age": {"$gte": 25}},
    ]
    
    results = []
    for i, query in enumerate(queries):
        print(f"  üîç –ó–∞–ø—Ä–æ—Å {i+1}: {query}")
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        if i == 4:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
            cursor = db.users.find(query).sort("created", -1).limit(10)
        else:
            cursor = db.users.find(query).limit(10)
        
        docs = list(cursor)
        duration = (time.time() - start_time) * 1000
        
        results.append({
            "query": str(query),
            "docs_found": len(docs),
            "duration_ms": round(duration, 2)
        })
        
        print(f"    ‚è±Ô∏è {duration:.1f}ms, –Ω–∞–π–¥–µ–Ω–æ: {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    
    return results

def parse_mongodb_log(lines_to_check=100):
    """–ü–∞—Ä—Å–∏–º –ª–æ–≥ MongoDB –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç COLLSCAN –æ–ø–µ—Ä–∞—Ü–∏–π"""
    if not Path(MONGO_LOG_PATH).exists():
        print(f"‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {MONGO_LOG_PATH}")
        return []
    
    print(f"üìã –ü–∞—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {lines_to_check} —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ MongoDB...")
    
    # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
    try:
        result = subprocess.run(['tail', '-n', str(lines_to_check), MONGO_LOG_PATH], 
                              capture_output=True, text=True)
        lines = result.stdout.splitlines()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
        return []
    
    collscans = []
    collscan_pattern = re.compile(r'.*COLLSCAN.*')
    duration_pattern = re.compile(r'"durationMillis":(\d+)')
    namespace_pattern = re.compile(r'"ns":"([^"]+)"')
    docs_pattern = re.compile(r'"docsExamined":(\d+)')
    
    for line in lines:
        if 'COLLSCAN' in line:
            duration_match = duration_pattern.search(line)
            ns_match = namespace_pattern.search(line)
            docs_match = docs_pattern.search(line)
            
            if duration_match and ns_match:
                collscans.append({
                    "namespace": ns_match.group(1),
                    "duration_ms": int(duration_match.group(1)),
                    "docs_examined": int(docs_match.group(1)) if docs_match else 0,
                    "timestamp": datetime.utcnow().isoformat() + "Z",
                    "operation": "find"  # —É–ø—Ä–æ—â–µ–Ω–∏–µ
                })
    
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(collscans)} COLLSCAN –æ–ø–µ—Ä–∞—Ü–∏–π")
    return collscans

def format_hotspots_table(collscans):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º COLLSCAN –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞—Å–∏–≤—É—é —Ç–∞–±–ª–∏—Ü—É"""
    if not collscans:
        return "–ù–µ—Ç COLLSCAN –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –ª–æ–≥–∞—Ö"
    
    header = "namespace                     op       time      details\n" + "-" * 60
    rows = [header]
    
    for cs in collscans[:10]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10
        namespace = cs["namespace"][:25].ljust(25)
        op = cs["operation"][:8].ljust(8)
        time_str = f"{cs['duration_ms']}ms".rjust(8)
        details = f"plan:COLLSCAN docs:{cs['docs_examined']} keys:0"
        
        row = f"{namespace} {op} {time_str}  {details}"
        rows.append(row)
    
    return "\n".join(rows)

def send_real_alert(host, collscans):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–ª–µ—Ä—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ MongoDB –ª–æ–≥–∞"""
    hotspots_table = format_hotspots_table(collscans)
    last_ts = collscans[0]["timestamp"] if collscans else datetime.utcnow().isoformat() + "Z"
    
    data = {
        "receiver": "seed",
        "status": "firing",
        "alerts": [{
            "status": "firing",
            "labels": {
                "alertname": "mongo_collscan",
                "host": host,
                "env": "test",
                "instance": f"{host}:27017",
                "job": "mongodb",
                "severity": "warning"
            },
            "annotations": {
                "summary": f"MongoDB COLLSCAN detected - {len(collscans)} slow operations",
                "description": f"Real COLLSCAN operations detected on {host}",
                "hotspots": hotspots_table,
                "last_ts": last_ts,
                "runbook_url": "https://docs.mongodb.com/manual/tutorial/create-indexes-to-support-queries/"
            },
            "startsAt": datetime.utcnow().isoformat() + "Z",
            "endsAt": "0001-01-01T00:00:00Z",
            "generatorURL": "http://mongodb:27017/",
            "fingerprint": f"real_collscan_{int(time.time())}"
        }],
        "groupLabels": {"alertname": "mongo_collscan"},
        "commonLabels": {"alertname": "mongo_collscan", "host": host},
        "commonAnnotations": {},
        "externalURL": "http://alertmanager:9093",
        "version": "4",
        "groupKey": f"{{}}{{host=\"{host}\"}}:{{alertname=\"mongo_collscan\"}}"
    }
    
    try:
        r = requests.post(SEED_URL, json=data, timeout=10)
        print(f"üì§ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {r.status_code}")
        if r.status_code == 200:
            print("‚úÖ SEED –ø–æ–ª—É—á–∏–ª –∞–ª–µ—Ä—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {r.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")

def main():
    import sys
    global MONGO_URI
    
    host = sys.argv[1] if len(sys.argv) > 1 else "d-dba-mng-adv-msk02"
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º URI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ö–æ—Å—Ç–∞
    if "msk01" in host:
        MONGO_URI = "mongodb://zabbix:zabbix@d-dba-mng-adv-msk01:27017/?connect=direct"
    else:
        MONGO_URI = "mongodb://zabbix:zabbix@d-dba-mng-adv-msk02:27017/?connect=direct"
    
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö COLLSCAN –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ {host}")
    print(f"üîó MongoDB URI: {MONGO_URI}")
    print("=" * 60)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        create_test_data()
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º COLLSCAN –∑–∞–ø—Ä–æ—Å—ã
        query_results = generate_collscan_queries()
        
        # 3. –ñ–¥–µ–º —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ø–∞–ª–∏ –≤ –ª–æ–≥
        print("‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥...")
        time.sleep(3)
        
        # 4. –ü–∞—Ä—Å–∏–º –ª–æ–≥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç COLLSCAN
        collscans = parse_mongodb_log()
        
        if collscans:
            print(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(collscans)} COLLSCAN –æ–ø–µ—Ä–∞—Ü–∏–π!")
            for cs in collscans[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"  üìä {cs['namespace']}: {cs['duration_ms']}ms, docs: {cs['docs_examined']}")
        else:
            print("‚ö†Ô∏è COLLSCAN –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–≥–µ")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Ç—å –∫ –ª–æ–≥—É MongoDB")
            print("   2. –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: db.setProfilingLevel(1, {slowms: 0})")
            print("   3. –£–≤–µ–ª–∏—á–∏—Ç—å verbosity –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            collscans = [
                {
                    "namespace": f"{DB_NAME}.users",
                    "duration_ms": result["duration_ms"],
                    "docs_examined": 1000 + i * 500,
                    "timestamp": datetime.utcnow().isoformat() + "Z",
                    "operation": "find"
                }
                for i, result in enumerate(query_results[:3])
            ]
            print("üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        
        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–ª–µ—Ä—Ç
        send_real_alert(host, collscans)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()