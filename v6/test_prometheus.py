#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SEED —Å Prometheus –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
"""
import json
import requests
import time

SEED_URL = "http://localhost:8080"

def test_prometheus_enrichment():
    """–¢–µ—Å—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Prometheus"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å SEED –∏ Prometheus –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    try:
        r = requests.get(f"{SEED_URL}/health", timeout=5)
        health = r.json()
        print("üè• SEED Health Check:")
        print(f"   Status: {'‚úÖ' if health.get('status') == 'ok' else '‚ùå'}")
        print(f"   LLM: {'‚úÖ' if health.get('use_llm') else '‚è∏Ô∏è'}")
        print(f"   Prometheus: {'‚úÖ' if health.get('prometheus_enrichment') else '‚è∏Ô∏è'}")
        if health.get('prometheus_url'):
            print(f"   Prometheus URL: {health['prometheus_url']}")
            
        if not health.get('prometheus_enrichment'):
            print("\n‚ö†Ô∏è Prometheus enrichment disabled. To enable:")
            print("   1. Set PROM_URL in configs/seed.env")
            print("   2. Restart SEED: ./stop.sh && ./start.sh")
            print("   3. Will fallback to basic alerts without metrics")
            
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_scenarios = [
        {
            "name": "Disk Space Alert with Mount",
            "alert": {
                "status": "firing",
                "labels": {
                    "alertname": "DiskSpaceLow",
                    "instance": "web-app-01.company.local:9100",
                    "severity": "critical",
                    "mountpoint": "/var/lib/postgresql",
                    "job": "node_exporter",
                    "device": "/dev/sda1"
                },
                "annotations": {
                    "summary": "Disk space usage is 92% on /var/lib/postgresql",
                    "description": "PostgreSQL database partition is running critically low on space"
                }
            }
        },
        {
            "name": "High Memory Alert",
            "alert": {
                "status": "firing",
                "labels": {
                    "alertname": "HighMemoryUsage",
                    "instance": "api-server-02.company.local:9100",
                    "severity": "high",
                    "job": "node_exporter"
                },
                "annotations": {
                    "summary": "High memory usage 89% on api-server-02",
                    "description": "Memory consumption is consistently high, may impact performance"
                }
            }
        },
        {
            "name": "CPU Alert",
            "alert": {
                "status": "firing", 
                "labels": {
                    "alertname": "HighCPUUsage",
                    "instance": "worker-03.company.local:9100",
                    "severity": "warning",
                    "job": "node_exporter"
                },
                "annotations": {
                    "summary": "High CPU usage 85% on worker-03",
                    "description": "CPU load has been consistently high for 10+ minutes"
                }
            }
        }
    ]
    
    print(f"\nüß™ Testing Prometheus enrichment scenarios...")
    print("=" * 60)
    
    for scenario in test_scenarios:
        print(f"\nüìä Test: {scenario['name']}")
        print("-" * 40)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –≤ SEED
        payload = {
            "receiver": "seed-webhook",
            "status": "firing",
            "alerts": [scenario["alert"]],
            "groupKey": f"test-{int(time.time())}",
            "version": "4"
        }
        
        try:
            r = requests.post(f"{SEED_URL}/alertmanager", json=payload, timeout=15)
            if r.status_code == 200:
                result = r.json()
                print(f"‚úÖ Alert sent successfully: {result}")
                print("üì± Expected in Mattermost:")
                print("   ‚Ä¢ FF-style formatting with emoji")
                print("   ‚Ä¢ üìä Prometheus metrics (if configured)")
                print("   ‚Ä¢ üß† Enhanced LLM recommendations")
            else:
                print(f"‚ùå Error {r.status_code}: {r.text}")
        except Exception as e:
            print(f"‚ùå Request failed: {e}")
            
        time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

def test_multi_alert_enrichment():
    """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º"""
    print(f"\nüî• Testing complex multi-alert incident with enrichment...")
    print("=" * 60)
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–∞ –æ–¥–Ω–æ–º —Ö–æ—Å—Ç–µ
    alerts = [
        {
            "status": "firing",
            "labels": {
                "alertname": "HighCPUUsage",
                "instance": "db-primary.company.local:9100",
                "severity": "high",
                "job": "node_exporter"
            },
            "annotations": {
                "summary": "High CPU usage 91% on db-primary",
                "description": "Database server CPU load is critically high"
            }
        },
        {
            "status": "firing", 
            "labels": {
                "alertname": "HighMemoryUsage",
                "instance": "db-primary.company.local:9100",
                "severity": "high",
                "job": "node_exporter"
            },
            "annotations": {
                "summary": "High memory usage 87% on db-primary", 
                "description": "Database server memory consumption is very high"
            }
        },
        {
            "status": "firing",
            "labels": {
                "alertname": "DiskSpaceLow",
                "instance": "db-primary.company.local:9100",
                "severity": "critical",
                "mountpoint": "/var/lib/postgresql",
                "job": "node_exporter"
            },
            "annotations": {
                "summary": "Disk space usage is 94% on /var/lib/postgresql",
                "description": "Database partition is critically full"
            }
        }
    ]
    
    payload = {
        "receiver": "seed-webhook",
        "status": "firing", 
        "alerts": alerts,
        "groupKey": f"complex-incident-{int(time.time())}",
        "version": "4"
    }
    
    try:
        r = requests.post(f"{SEED_URL}/alertmanager", json=payload, timeout=20)
        if r.status_code == 200:
            result = r.json()
            print(f"‚úÖ Complex incident sent: {result}")
            print("üì± Expected in Mattermost:")
            print("   ‚Ä¢ Multiple alerts with individual enrichment")
            print("   ‚Ä¢ üìä Summary statistics")
            print("   ‚Ä¢ üß† Comprehensive LLM analysis of the incident")
            print("   ‚Ä¢ Color coding based on highest severity (critical=red)")
        else:
            print(f"‚ùå Error {r.status_code}: {r.text}")
    except Exception as e:
        print(f"‚ùå Request failed: {e}")

def main():
    print("üåå SEED v6.1 Prometheus Integration Test")
    print("=" * 60)
    
    test_prometheus_enrichment()
    test_multi_alert_enrichment()
    
    print("\n" + "=" * 60)
    print("üéâ Prometheus integration testing completed!")
    print("\nüìã What to check:")
    print("   üìä Enriched metrics in alert cards (CPU ~ X%, MEM ~ Y%, Disk ~ Z%)")
    print("   üß† More accurate LLM recommendations using actual metrics")
    print("   üìà Trends and context from Prometheus queries")
    print("   üéØ Host-specific performance data")
    
    print(f"\nüîç Monitor enrichment logs: tail -f logs/agent.log | grep ENRICH")

if __name__ == "__main__":
    main()