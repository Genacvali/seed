#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã SEED v6 —Å Prometheus –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ LLM
"""
import json
import requests
import time
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SEED_URL = "http://localhost:8080"
PROMETHEUS_URL = "http://localhost:9090"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Prometheus

def query_prometheus(query: str, prometheus_url: str = PROMETHEUS_URL):
    """–ó–∞–ø—Ä–æ—Å –∫ Prometheus API"""
    try:
        url = f"{prometheus_url}/api/v1/query"
        params = {"query": query}
        r = requests.get(url, params=params, timeout=10)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        print(f"‚ùå Prometheus query failed: {e}")
        return None

def create_disk_alert(host: str, usage_percent: float, mount: str = "/"):
    """–°–æ–∑–¥–∞–µ—Ç –∞–ª–µ—Ä—Ç –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
    return {
        "status": "firing",
        "labels": {
            "alertname": "DiskSpaceLow",
            "instance": host,
            "severity": "critical" if usage_percent > 90 else "warning",
            "mountpoint": mount,
            "job": "node_exporter"
        },
        "annotations": {
            "summary": f"Disk space usage is {usage_percent:.1f}% on {mount}",
            "description": f"Host {host} has {usage_percent:.1f}% disk usage on {mount} mount. Free space is critically low.",
            "runbook_url": "https://wiki.company.com/runbooks/disk-space"
        },
        "startsAt": (datetime.now() - timedelta(minutes=5)).isoformat() + "Z",
        "generatorURL": f"{PROMETHEUS_URL}/graph?g0.expr=disk_used_percent&g0.tab=1"
    }

def create_memory_alert(host: str, usage_percent: float):
    """–°–æ–∑–¥–∞–µ—Ç –∞–ª–µ—Ä—Ç –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏"""
    return {
        "status": "firing",
        "labels": {
            "alertname": "HighMemoryUsage",
            "instance": host,
            "severity": "high" if usage_percent > 85 else "warning",
            "job": "node_exporter"
        },
        "annotations": {
            "summary": f"High memory usage {usage_percent:.1f}% on {host}",
            "description": f"Memory usage on {host} is {usage_percent:.1f}%. This may affect system performance.",
            "runbook_url": "https://wiki.company.com/runbooks/memory"
        },
        "startsAt": (datetime.now() - timedelta(minutes=2)).isoformat() + "Z",
        "generatorURL": f"{PROMETHEUS_URL}/graph?g0.expr=memory_usage_percent"
    }

def create_cpu_alert(host: str, usage_percent: float):
    """–°–æ–∑–¥–∞–µ—Ç –∞–ª–µ—Ä—Ç –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ CPU"""
    return {
        "status": "firing", 
        "labels": {
            "alertname": "HighCPUUsage",
            "instance": host,
            "severity": "high" if usage_percent > 80 else "warning",
            "job": "node_exporter"
        },
        "annotations": {
            "summary": f"High CPU usage {usage_percent:.1f}% on {host}",
            "description": f"CPU usage on {host} has been above {usage_percent:.1f}% for more than 5 minutes.",
            "runbook_url": "https://wiki.company.com/runbooks/cpu"
        },
        "startsAt": (datetime.now() - timedelta(minutes=8)).isoformat() + "Z"
    }

def create_database_alert(host: str, connections: int):
    """–°–æ–∑–¥–∞–µ—Ç –∞–ª–µ—Ä—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    return {
        "status": "firing",
        "labels": {
            "alertname": "DatabaseConnectionsHigh", 
            "instance": host,
            "severity": "critical" if connections > 90 else "high",
            "job": "postgresql_exporter",
            "database": "production"
        },
        "annotations": {
            "summary": f"High database connections: {connections}/100",
            "description": f"PostgreSQL on {host} has {connections} active connections out of 100 max. Database may become unresponsive.",
            "runbook_url": "https://wiki.company.com/runbooks/postgresql"
        },
        "startsAt": (datetime.now() - timedelta(minutes=3)).isoformat() + "Z"
    }

def send_to_seed(alerts: list, test_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –≤ SEED"""
    payload = {
        "receiver": "seed-webhook",
        "status": "firing",
        "alerts": alerts,
        "groupKey": f"test-{int(time.time())}",
        "version": "4",
        "groupLabels": {},
        "commonLabels": {},
        "commonAnnotations": {},
        "externalURL": "http://alertmanager.local:9093"
    }
    
    print(f"\nüß™ Test: {test_name}")
    print("=" * 50)
    
    try:
        r = requests.post(f"{SEED_URL}/alertmanager", json=payload, timeout=15)
        if r.status_code == 200:
            result = r.json()
            print(f"‚úÖ SEED responded: {result}")
        else:
            print(f"‚ùå SEED error {r.status_code}: {r.text}")
    except Exception as e:
        print(f"‚ùå Request failed: {e}")

def test_with_prometheus_data():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Prometheus"""
    print("üîç Querying Prometheus for real metrics...")
    
    # –ó–∞–ø—Ä–æ—Å –¥–∏—Å–∫ usage
    disk_data = query_prometheus('100 - (node_filesystem_free_bytes{fstype!="tmpfs"} / node_filesystem_size_bytes * 100)')
    
    # –ó–∞–ø—Ä–æ—Å memory usage  
    mem_data = query_prometheus('(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100')
    
    # –ó–∞–ø—Ä–æ—Å CPU usage
    cpu_data = query_prometheus('100 - (avg(rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)')
    
    alerts = []
    
    if disk_data and disk_data.get("data", {}).get("result"):
        for metric in disk_data["data"]["result"][:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
            instance = metric["metric"].get("instance", "unknown")
            mountpoint = metric["metric"].get("mountpoint", "/")
            usage = float(metric["value"][1])
            
            if usage > 70:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ usage > 70%
                alerts.append(create_disk_alert(instance, usage, mountpoint))
    
    if mem_data and mem_data.get("data", {}).get("result"):
        for metric in mem_data["data"]["result"][:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2
            instance = metric["metric"].get("instance", "unknown") 
            usage = float(metric["value"][1])
            
            if usage > 60:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ usage > 60%
                alerts.append(create_memory_alert(instance, usage))
    
    if alerts:
        send_to_seed(alerts, "Real Prometheus Metrics")
    else:
        print("‚ö†Ô∏è No high-usage metrics found in Prometheus, running synthetic test...")
        test_synthetic_alerts()

def test_synthetic_alerts():
    """–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –¢–µ—Å—Ç 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç –¥–∏—Å–∫–∞
    print("\n" + "="*60)
    alerts = [create_disk_alert("db-prod-01.company.com", 94.2, "/var/lib/postgresql")]
    send_to_seed(alerts, "Critical Disk Space Alert")
    time.sleep(2)
    
    # –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ severity
    print("\n" + "="*60) 
    alerts = [
        create_memory_alert("app-web-01.company.com", 87.5),
        create_cpu_alert("app-web-02.company.com", 92.1), 
        create_disk_alert("app-web-03.company.com", 78.3, "/tmp")
    ]
    send_to_seed(alerts, "Multiple Alerts (Different Severities)")
    time.sleep(2)
    
    # –¢–µ—Å—Ç 3: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n" + "="*60)
    alerts = [create_database_alert("postgres-master.company.com", 95)]
    send_to_seed(alerts, "Database Connection Alert")
    time.sleep(2)
    
    # –¢–µ—Å—Ç 4: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    print("\n" + "="*60)
    alerts = [
        create_disk_alert("mongo-01.company.com", 96.8, "/data/mongodb"),
        create_memory_alert("mongo-01.company.com", 89.2),
        create_cpu_alert("mongo-01.company.com", 85.7),
    ]
    send_to_seed(alerts, "Complex Infrastructure Incident")

def test_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ SEED"""
    try:
        r = requests.get(f"{SEED_URL}/health", timeout=5)
        health = r.json()
        print("üè• SEED Health Check:")
        print(f"   Status: {'‚úÖ' if health.get('status') == 'ok' else '‚ùå'}")
        print(f"   LLM: {'‚úÖ' if health.get('use_llm') else '‚è∏Ô∏è'}")
        print(f"   Mattermost: {'‚úÖ' if health.get('mm_webhook') else '‚ùå'}")
        print(f"   RabbitMQ: {'‚úÖ' if health.get('rabbit_enabled') else '‚è∏Ô∏è'}")
        print(f"   Version: {health.get('version', 'unknown')}")
        return health.get("status") == "ok"
    except Exception as e:
        print(f"‚ùå SEED health check failed: {e}")
        return False

def main():
    print("üåå SEED v6 Realistic Testing Suite")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SEED
    if not test_health_check():
        print("‚ùå SEED is not available. Please start it first with ./start.sh")
        return
    
    print(f"\nüéØ Testing SEED at: {SEED_URL}")
    print(f"üéØ Prometheus at: {PROMETHEUS_URL}")
    
    # –ü—Ä–æ–±—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Prometheus
    try:
        test_with_prometheus_data()
    except Exception as e:
        print(f"‚ö†Ô∏è Prometheus test failed ({e}), falling back to synthetic...")
        test_synthetic_alerts()
    
    print("\n" + "="*60)
    print("üéâ Testing completed!")
    print("\nüí° Tips:")
    print("   - Check Mattermost for formatted alerts with FF styling")
    print("   - LLM recommendations should appear as 'üß† –ú–∞–≥–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞'")
    print("   - Colors should match severity levels")
    print(f"   - Monitor logs: tail -f logs/agent.log")

if __name__ == "__main__":
    main()