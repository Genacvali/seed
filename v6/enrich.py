# v6/enrich.py
import os, time
from prom import query, query_range, last_value

LOOKBACK = int(os.getenv("PROM_LOOKBACK_SEC", "900"))  # 15 –º–∏–Ω

def _pct(x): 
    return f"{x:.0f}%" if isinstance(x, (int, float)) else "n/a"

def _num(x):
    return f"{x:.2f}" if isinstance(x, (int, float)) else "n/a"

def enrich_alert(alert: dict) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { 'cpu_now':.., 'mem_now':.., 'disk_used_now':.., ... }
    –ù–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–µ—Ç, –µ—Å–ª–∏ Prometheus –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.
    """
    labels = alert.get("labels", {})
    inst   = labels.get("instance") or labels.get("host")
    mount  = labels.get("mountpoint") or labels.get("path")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ hostname –±–µ–∑ –ø–æ—Ä—Ç–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫
    inst_with_port = inst.split(":")[0] if inst else None
    end    = time.time()
    start  = end - LOOKBACK

    enr = {}

    if inst:
        # CPU (node_exporter –≤–∞—Ä–∏–∞–Ω—Ç)
        cpu_expr = f'100 * (1 - avg(rate(node_cpu_seconds_total{{instance="{inst_with_port}",mode="idle"}}[5m])))'
        # –ï—Å–ª–∏ —É —Ç–µ–±—è Telegraf-–º–æ–Ω–æ–ª–∏—Ç –≤ Prom, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –º–µ—Ç—Ä–∏–∫-–Ω–µ–π–º:
        # cpu_expr = f'avg(cpu_usage{{instance="{inst_with_port}"}})'

        mem_expr = (
            f'100 * (1 - (node_memory_MemAvailable_bytes{{instance="{inst_with_port}"}}'
            f' / node_memory_MemTotal_bytes{{instance="{inst_with_port}"}}))'
        )
        # –î–ª—è Telegraf (–µ—Å–ª–∏ –∏–º–µ–Ω–∞ –¥—Ä—É–≥–∏–µ):
        # mem_expr = f'100 * ((mem_total{{instance="{inst_with_port}"}} - mem_available{{instance="{inst_with_port}"}}) / mem_total{{instance="{inst_with_port}"}})'

        # Load Average
        load_expr = f'node_load1{{instance="{inst_with_port}"}}'
        
        # Disk usage for root and data
        disk_root_expr = f'''100 * (node_filesystem_size_bytes{{instance="{inst_with_port}",mountpoint="/",fstype!~"tmpfs|overlay"}} 
                           - node_filesystem_avail_bytes{{instance="{inst_with_port}",mountpoint="/",fstype!~"tmpfs|overlay"}})
                           / node_filesystem_size_bytes{{instance="{inst_with_port}",mountpoint="/",fstype!~"tmpfs|overlay"}}'''
        
        disk_data_expr = f'''100 * (node_filesystem_size_bytes{{instance="{inst_with_port}",mountpoint="/data",fstype!~"tmpfs|overlay"}} 
                            - node_filesystem_avail_bytes{{instance="{inst_with_port}",mountpoint="/data",fstype!~"tmpfs|overlay"}})
                            / node_filesystem_size_bytes{{instance="{inst_with_port}",mountpoint="/data",fstype!~"tmpfs|overlay"}}'''

        try:
            enr["cpu_now"] = last_value(query(cpu_expr))
            enr["mem_now"] = last_value(query(mem_expr))
            enr["load_now"] = last_value(query(load_expr))
            enr["disk_root_now"] = last_value(query(disk_root_expr.replace('\n', '').strip()))
            enr["disk_data_now"] = last_value(query(disk_data_expr.replace('\n', '').strip()))
            
            # Telegraf fallback if node_exporter metrics not available
            if not isinstance(enr.get("cpu_now"), (int, float)):
                cpu_telegraf_expr = f'100 - cpu_usage_idle{{instance="{inst}",port="9216"}}'
                enr["cpu_now"] = last_value(query(cpu_telegraf_expr))
            
            if not isinstance(enr.get("mem_now"), (int, float)):
                mem_telegraf_expr = f'mem_used_percent{{instance="{inst}",port="9216"}}'
                enr["mem_now"] = last_value(query(mem_telegraf_expr))
                
            if not isinstance(enr.get("load_now"), (int, float)):
                load_telegraf_expr = f'system_load1{{instance="{inst}",port="9216"}}'
                enr["load_now"] = last_value(query(load_telegraf_expr))
                
        except Exception:
            pass

    if inst and mount:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ (node_exporter)
        disk_expr = (
            f'100 * (node_filesystem_size_bytes{{instance="{inst_with_port}",mountpoint="{mount}",fstype!~"tmpfs|overlay"}}'
            f' - node_filesystem_avail_bytes{{instance="{inst_with_port}",mountpoint="{mount}",fstype!~"tmpfs|overlay"}})'
            f' / node_filesystem_size_bytes{{instance="{inst_with_port}",mountpoint="{mount}",fstype!~"tmpfs|overlay"}}'
        )
        # Telegraf-–≤–∞—Ä–∏–∞–Ω—Ç:
        # disk_expr = f'disk_used_percent{{instance="{inst_with_port}",path="{mount}"}}'

        try:
            enr["disk_used_now"] = last_value(query(disk_expr))
            # —Ç—Ä–µ–Ω–¥ –∑–∞ 15 –º–∏–Ω (avg/max)
            res = query_range(disk_expr, start, end, "60s")
            # –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞
            if res and "values" in res[0] and len(res[0]["values"]) >= 2:
                vals = [float(v[1]) for v in res[0]["values"] if v and v[1] is not None]
                if vals:
                    enr["disk_used_avg15m"] = sum(vals)/len(vals)
                    enr["disk_used_max15m"] = max(vals)
        except Exception:
            pass

    # –ü—Ä–∏–º–µ—Ä –¥–ª—è Mongo COLLSCAN (–µ—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∞ –µ—Å—Ç—å –≤ Prom ‚Äî –æ—Ç Telegraf/—ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤)
    if labels.get("alertname","").lower().startswith("mongohot"):
        # –∞–¥–∞–ø—Ç–∏—Ä—É–π expr –ø–æ–¥ —Å–≤–æ—é –º–µ—Ç—Ä–∏–∫—É (–ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ ‚Äî –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è)
        expr = f'sum(increase(mongodb_op_collsacn_total{{instance="{inst_with_port}"}}[15m]))'
        try:
            enr["mongo_colls_scans_15m"] = last_value(query(expr))
        except Exception:
            pass

    # –ü—Ä–∏–º–µ—Ä –¥–ª—è Postgres slow queries (—Ç–æ–∂–µ –ø–æ–¥ —Å–≤–æ—é –º–µ—Ç—Ä–∏–∫—É/—ç–∫—Å–ø–æ—Ä—Ç–µ—Ä)
    if labels.get("alertname","").lower().startswith("pgslow"):
        expr = f'sum(increase(pg_stat_statements_calls_slow_total{{instance="{inst_with_port}"}}[15m]))'
        try:
            enr["pg_slow_15m"] = last_value(query(expr))
        except Exception:
            pass

    # Final Fantasy —Å—Ç–∏–ª—å —ç–º–æ–¥–∑–∏ –¥–ª—è –¥–∏—Å–∫–æ–≤
    def _disk_emoji(usage):
        if not isinstance(usage, (int, float)):
            return "‚öôÔ∏è"  # –ú–µ—Ö–∞–Ω–∏–∑–º - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
        if usage >= 90:
            return "üíéüî•"  # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª —Å –æ–≥–Ω–µ–º - –∫—Ä–∏—Ç–∏—á–Ω–æ
        elif usage >= 80:
            return "‚öîÔ∏è"  # –ú–µ—á - –æ–ø–∞—Å–Ω–æ
        elif usage >= 60:
            return "üõ°Ô∏è"  # –©–∏—Ç - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
        else:
            return "‚ú®"  # –ó–≤–µ–∑–¥–æ—á–∫–∞ - –≤—Å–µ —Ö–æ—Ä–æ—à–æ
    
    # Final Fantasy —Å—Ç–∏–ª—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    def _cpu_emoji(usage):
        if not isinstance(usage, (int, float)):
            return "üîÆ"  # –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞ - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
        if usage >= 90:
            return "üíéüî•"  # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª —Å –æ–≥–Ω–µ–º - –∫—Ä–∏—Ç–∏—á–Ω–æ
        elif usage >= 70:
            return "üó°Ô∏è"  # –û—Å—Ç—Ä—ã–π –º–µ—á - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        elif usage >= 50:
            return "‚öîÔ∏è"  # –°–∫—Ä–µ—â–µ–Ω–Ω—ã–µ –º–µ—á–∏ - —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
        else:
            return "‚ú®"  # –ó–≤–µ–∑–¥–æ—á–∫–∞ - –Ω–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            
    def _mem_emoji(usage):
        if not isinstance(usage, (int, float)):
            return "üßô‚Äç‚ôÇÔ∏è"  # –ú–∞–≥ - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
        if usage >= 90:
            return "üíéüî•"  # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª —Å –æ–≥–Ω–µ–º - –∫—Ä–∏—Ç–∏—á–Ω–æ
        elif usage >= 70:
            return "üè∞"  # –ó–∞–º–æ–∫ - –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        elif usage >= 50:
            return "üõ°Ô∏è"  # –©–∏—Ç - —Å—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ  
        else:
            return "üåü"  # –ó–≤–µ–∑–¥–∞ - –Ω–∏–∑–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

    # –£–¥–æ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫—Ä–∞—Ç–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ (–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É)
    summary = []
    if "cpu_now" in enr:  
        cpu_emoji = _cpu_emoji(enr['cpu_now'])
        summary.append(f"{cpu_emoji} CPU ~ {_pct(enr['cpu_now'])}")
    if "mem_now" in enr:  
        mem_emoji = _mem_emoji(enr['mem_now'])
        summary.append(f"{mem_emoji} MEM ~ {_pct(enr['mem_now'])}")
    if "load_now" in enr: summary.append(f"‚öñÔ∏è Load: {_num(enr['load_now'])}")
    if "disk_root_now" in enr: 
        emoji = _disk_emoji(enr['disk_root_now'])
        summary.append(f"{emoji} Disk /: {_pct(enr['disk_root_now'])}")
    if "disk_data_now" in enr: 
        emoji = _disk_emoji(enr['disk_data_now'])
        summary.append(f"{emoji} Disk /data: {_pct(enr['disk_data_now'])}")
    
    # Legacy disk support (from mountpoint)
    if "disk_used_now" in enr: 
        emoji = _disk_emoji(enr['disk_used_now'])
        s = f"{emoji} Disk {mount}: {_pct(enr['disk_used_now'])}"
        if "disk_used_max15m" in enr:
            s += f" (‚â§{_pct(enr['disk_used_max15m'])} –∑–∞ 15–º)"
        summary.append(s)

    enr["summary_line"] = " ¬∑ ".join(summary) if summary else ""
    return enr