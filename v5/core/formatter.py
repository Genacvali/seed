# -*- coding: utf-8 -*-
"""
SEED Agent v5 Message Formatter
–ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Mattermost/Slack
"""
import re
import datetime
from typing import Dict, Any, List, Optional

class AlertMessageFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ Markdown"""
    
    # –ò–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    SEVERITY_ICONS = {
        "critical": "üö®",
        "high": "‚ö†Ô∏è", 
        "warning": "üìä",
        "info": "‚ÑπÔ∏è",
        "unknown": "‚ùì"
    }
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    PRIORITY_LABELS = {
        3: "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô", 
        2: "‚ö†Ô∏è –í–´–°–û–ö–ò–ô", 
        1: "üìä –°–†–ï–î–ù–ò–ô", 
        0: "‚ÑπÔ∏è –ù–ò–ó–ö–ò–ô"
    }
    
    @classmethod
    def format_alert_message(
        cls, 
        alertname: str,
        instance: str,
        severity: str,
        priority: int,
        labels: Dict[str, str],
        annotations: Dict[str, str],
        llm_response: str,
        time_context: str = "",
        status: str = "firing"
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –≤ –∫—Ä–∞—Å–∏–≤—ã–π –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π Markdown
        """
        if status == "resolved":
            return cls._format_resolved_message(alertname, instance)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        severity_icon = cls.SEVERITY_ICONS.get(severity.lower(), "üìã")
        priority_text = cls.PRIORITY_LABELS.get(priority, "üìã –û–ë–´–ß–ù–´–ô")
        
        # –í—Ä–µ–º—è
        current_time = datetime.datetime.now()
        time_str = current_time.strftime('%Y-%m-%d %H:%M')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ç–∫–∏ (—É–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ)
        filtered_labels = {
            k: v for k, v in labels.items() 
            if k not in ['alertname', 'instance', '__name__']
        }
        labels_str = ', '.join([f"{k}={v}" for k, v in filtered_labels.items()]) if filtered_labels else "–Ω–µ—Ç"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = (
            annotations.get('summary') or 
            annotations.get('description') or 
            '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º LLM –æ—Ç–≤–µ—Ç
        analysis_section = cls._format_llm_analysis(llm_response)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""{severity_icon} **{alertname}**

**–°–µ—Ä–≤–µ—Ä:** {instance}  
**–í—Ä–µ–º—è:** {time_str}{time_context}  
**–ú–µ—Ç–∫–∏:** {labels_str}  
**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}

---

### üß† AI –ê–Ω–∞–ª–∏–∑
{analysis_section}

---
"""
        return message.strip()
    
    @classmethod
    def _format_resolved_message(cls, alertname: str, instance: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞"""
        current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
        
        return f"""‚úÖ **–ê–õ–ï–†–¢ –†–ï–®–ï–ù: {alertname}**

**–°–µ—Ä–≤–µ—Ä:** {instance}  
**–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è:** {current_time}  

üéâ –ü—Ä–æ–±–ª–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –∏–ª–∏ —Ä–µ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    
    @classmethod
    def _format_llm_analysis(cls, llm_response: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç LLM –æ—Ç–≤–µ—Ç, –≤—ã–¥–µ–ª—è—è –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–¥-–±–ª–æ–∫–∏
        """
        if not llm_response or llm_response.strip() == "":
            return "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - LLM –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"
        
        if "LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in llm_response or "–û—à–∏–±–∫–∞ LLM" in llm_response:
            return llm_response
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏
        sections = cls._parse_llm_sections(llm_response)
        
        if not sections:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            return cls._extract_commands_to_blocks(llm_response)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏
        formatted_parts = []
        
        for section in sections:
            if section['type'] == 'analysis':
                formatted_parts.append(section['content'])
            elif section['type'] == 'recommendations':
                formatted_parts.append("### üõ† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                formatted_parts.append(section['content'])
            elif section['type'] == 'commands':
                formatted_parts.append("### üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
                formatted_parts.append(section['content'])
            elif section['type'] == 'next_steps':
                formatted_parts.append("### üìç –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏")
                formatted_parts.append(section['content'])
        
        return "\n\n".join(formatted_parts)
    
    @classmethod
    def _parse_llm_sections(cls, text: str) -> List[Dict[str, str]]:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å LLM –æ—Ç–≤–µ—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–µ–∫—Ü–∏–∏
        """
        sections = []
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        current_section = ""
        current_type = "analysis"
        
        lines = text.split('\n')
        
        for line in lines:
            line_lower = line.lower().strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ–∫—Ü–∏–∏
            if any(word in line_lower for word in ['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü', '—Å–æ–≤–µ—Ç', '–¥–µ–π—Å—Ç–≤–∏', '—Ä–µ—à–µ–Ω–∏']):
                if current_section.strip():
                    sections.append({'type': current_type, 'content': current_section.strip()})
                current_section = ""
                current_type = "recommendations"
            elif any(word in line_lower for word in ['–∫–æ–º–∞–Ω–¥', '–ø—Ä–æ–≤–µ—Ä–∫', '–∑–∞–ø—É—Å–∫']):
                if current_section.strip():
                    sections.append({'type': current_type, 'content': current_section.strip()})
                current_section = ""
                current_type = "commands"
            elif any(word in line_lower for word in ['–¥–∞–ª–µ–µ', '—Å–ª–µ–¥—É—é—â', '—à–∞–≥–∏']):
                if current_section.strip():
                    sections.append({'type': current_type, 'content': current_section.strip()})
                current_section = ""
                current_type = "next_steps"
            
            current_section += line + "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
        if current_section.strip():
            sections.append({'type': current_type, 'content': current_section.strip()})
        
        return sections
    
    @classmethod
    def _extract_commands_to_blocks(cls, text: str) -> str:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∏—Ö –≤ –∫–æ–¥-–±–ª–æ–∫–∏
        """
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
        command_patterns = [
            r'(systemctl\s+\w+\s+\w+)',
            r'(journalctl\s+[^\n]+)',
            r'(sudo\s+[^\n]+)',
            r'(docker\s+[^\n]+)',
            r'(kubectl\s+[^\n]+)',
            r'(mongo\s+[^\n]+)',
            r'(find\s+[^\n]+)',
            r'(grep\s+[^\n]+)',
            r'(ps\s+[^\n]+)',
            r'(top\s*$)',
            r'(htop\s*$)',
            r'(df\s+[^\n]*)',
            r'(du\s+[^\n]+)',
        ]
        
        formatted_text = text
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        for pattern in command_patterns:
            formatted_text = re.sub(
                pattern, 
                lambda m: f"\n```bash\n{m.group(1)}\n```\n", 
                formatted_text, 
                flags=re.MULTILINE
            )
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        formatted_text = re.sub(r'\n\n\n+', '\n\n', formatted_text)
        
        return formatted_text.strip()
    
    @classmethod
    def format_system_status(cls, host: str, cpu_info: str, ram_info: str, disk_info: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)"""
        message = f"### üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã {host}\n\n"
        
        if cpu_info and cpu_info != "n/a":
            message += f"üñ•Ô∏è **CPU:** {cpu_info}\n"
        
        if ram_info and ram_info != "n/a":
            message += f"üß† **Memory:** {ram_info}\n"
        
        if disk_info:
            message += f"üíæ **Storage:**\n"
            for disk in disk_info:
                message += f"  ‚Ä¢ {disk}\n"
        
        return message
    
    @classmethod
    def disk_status(cls, path: str, used_gb: float, total_gb: float, 
                   percentage: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ"""
        if percentage > 90:
            icon = cls.STATUS_ICONS["critical"]
        elif percentage > 80:
            icon = cls.STATUS_ICONS["warning"]
        else:
            icon = cls.STATUS_ICONS["ok"]
            
        return f"{icon} {path}: {percentage:.0f}% ({used_gb:.1f}/{total_gb:.1f} GB)"
    
    @classmethod
    def system_summary(cls, cpu_info: str, ram_info: str, disk_info: List[str],
                      host: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        header = cls.header("System Status", host)
        
        lines = [header]
        
        # CPU
        if cpu_info and cpu_info != "n/a":
            lines.append(f"üñ•Ô∏è CPU: {cpu_info}")
        else:
            lines.append(f"üñ•Ô∏è CPU: n/a")
            
        # RAM 
        if ram_info and ram_info != "n/a":
            lines.append(f"üß† Memory: {ram_info}")
        else:
            lines.append(f"üß† Memory: n/a")
            
        # –î–∏—Å–∫–∏
        if disk_info:
            lines.append(f"üíæ Storage:")
            for disk in disk_info:
                lines.append(f"  {disk}")
        else:
            lines.append(f"üíæ Storage: n/a")
            
        return "\n".join(lines)
    
    @classmethod
    def friendly_advice(cls, situation: str, host: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏"""
        advice_map = {
            "disk_critical": [
                "–ö—Ä–∏—Ç–∏—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                "–û—á–∏—Å—Ç–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏: find /var/log -name '*.log' -mtime +7 -delete", 
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
            ],
            "disk_warning": [
                "–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è - –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä—ã: du -sh /* | sort -hr", 
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∏—Å–∫–∞"
            ],
            "low_resources": [
                "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ",
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"
            ],
            "no_data": [
                f"Telegraf –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {host} - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–∏—Å telegraf –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
            ]
        }
        
        advice_list = advice_map.get(situation, ["–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —à—Ç–∞—Ç–Ω–æ"])
        return cls.advice_section(advice_list)
    
    @classmethod
    def error_message(cls, error: str, context: str = "") -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""        
        msg = f"*S.E.E.D. Error*\n\n"
        msg += f"Details: {error}\n"
        
        if context:
            msg += f"Context: {context}\n"
            
        msg += "\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        
        return msg