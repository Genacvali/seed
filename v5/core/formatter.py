# -*- coding: utf-8 -*-
"""
SEED Agent v5 Message Formatter
–ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Mattermost/Slack
"""
import re
import datetime
from typing import Dict, Any, List, Optional

def _strip_code_fences(text: str) -> str:
    """–£–±–∏—Ä–∞–µ–º –≤—Å–µ ```...``` (—Å –ª—é–±—ã–º —è–∑—ã–∫–æ–º) –∏–∑ –≤—Ö–æ–¥–∞"""
    return re.sub(r"```[a-zA-Z]*\s*([\s\S]*?)```", r"\1", text)

def _pick_commands(lines, limit=5):
    """–ë–µ—Ä—ë–º –¥–æ N —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫, –±–µ–∑ –º—É—Å–æ—Ä–∞"""
    cmd_re = re.compile(r"^\s*(sudo\s+|systemctl|journalctl|mongo\b|mongosh\b|kubectl|docker|grep\b|find\b|ps\b|df\b|du\b|ss\b|netstat\b|curl\b)\b.*")
    seen, cmds = set(), []
    for ln in lines:
        m = cmd_re.match(ln)
        if m:
            s = ln.strip()
            if s.lower() in ("bash",):  # –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ "bash"
                continue
            if s not in seen:
                seen.add(s)
                cmds.append(s)
            if len(cmds) >= limit:
                break
    return cmds

class AlertMessageFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ Markdown"""
    
    # –ò–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ Final Fantasy —Å—Ç–∏–ª–µ
    SEVERITY_ICONS = {
        "critical": "üíéüî•",   # crystal + danger
        "high": "‚öîÔ∏è",        # crossed blades
        "warning": "üõ°Ô∏è",     # shield
        "info": "‚ú®",         # sparkle
        "unknown": "‚ùî"       # fancy question
    }
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è Mattermost attachments
    SEVERITY_COLORS = {
        "critical": "#FF0000",   # –∫—Ä–∞—Å–Ω—ã–π
        "high": "#FF4500",      # –æ—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
        "warning": "#FFA500",   # –∂—ë–ª—Ç—ã–π
        "info": "#36A2EB",      # —Å–∏–Ω–∏–π
        "unknown": "#808080"    # —Å–µ—Ä—ã–π
    }
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    PRIORITY_LABELS = {
        3: "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô", 
        2: "‚ö†Ô∏è –í–´–°–û–ö–ò–ô", 
        1: "üìä –°–†–ï–î–ù–ò–ô", 
        0: "‚ÑπÔ∏è –ù–ò–ó–ö–ò–ô"
    }
    
    @classmethod
    def format_alert_message(
        cls, 
        alertname: str,
        instance: str,
        severity: str,
        priority: int,
        labels: Dict[str, str],
        annotations: Dict[str, str],
        llm_response: str,
        time_context: str = "",
        status: str = "firing"
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –∫—Ä–∞—Å–∏–≤—ã–π Markdown
        """
        if status == "resolved":
            return cls._format_resolved_message(alertname, instance)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ 
        severity_icon = cls.SEVERITY_ICONS.get(severity.lower(), "üìã")
        
        # –í—Ä–µ–º—è
        current_time = datetime.datetime.now()
        time_str = current_time.strftime('%Y-%m-%d %H:%M')
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = (
            annotations.get('summary') or 
            annotations.get('description') or 
            '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        )
        
        # –ü–∞—Ä—Å–∏–º LLM-–æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∫–æ–º–∞–Ω–¥—ã
        problems, commands = cls._extract_brief_info_from_llm(llm_response)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        compact_problems = cls._format_compact_recommendations(problems)
        compact_commands = cls._format_compact_recommendations(commands, max_length=300)
        
        # –°–æ–±–∏—Ä–∞–µ–º –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""{severity_icon} **{alertname} ({severity.upper()})**

üìç **–°–µ—Ä–≤–µ—Ä:** {instance}  
‚è∞ **–í—Ä–µ–º—è:** {time_str}{time_context}  
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}

---

### üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
{compact_problems}

### üõ† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
```bash
{compact_commands}
```

‚Äî Powered by üåå SEED ‚ú®"""
        return message.strip()
    
    @classmethod
    def _format_resolved_message(cls, alertname: str, instance: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞"""
        current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
        
        return f"""‚úÖ **–ê–õ–ï–†–¢ –†–ï–®–ï–ù: {alertname}**

**–°–µ—Ä–≤–µ—Ä:** {instance}  
**–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è:** {current_time}  

üéâ –ü—Ä–æ–±–ª–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –∏–ª–∏ —Ä–µ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

‚Äî SEED ‚ú®"""
    
    @classmethod
    def _extract_brief_info_from_llm(cls, llm_response: str) -> tuple:
        """–ö–æ—Ä–æ—Ç–∫–æ: 2‚Äì3 –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã + —á–∏—Å—Ç—ã–π –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥"""
        if not llm_response or not llm_response.strip():
            return "–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç LLM", "–ù–µ—Ç –∫–æ–º–∞–Ω–¥"
        
        if "LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in llm_response or "–û—à–∏–±–∫–∞ LLM" in llm_response:
            return llm_response, "LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        # 1) —É–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—Ä–æ–π–Ω—ã–µ –±—ç–∫—Ç–∏–∫–∏ –∏ —è–∑—ã–∫–∏
        clean = _strip_code_fences(llm_response)

        # 2) —Ä–∞–∑–æ–±—å—ë–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = [l.rstrip() for l in clean.splitlines() if l.strip()]

        # 3) –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞
        problems = []
        for l in lines:
            low = l.lower()
            # —Ñ–∏–ª—å—Ç—Ä—É–µ–º ¬´–≤–æ–¥—É¬ª
            if any(t in low for t in ("–∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç", "–æ–ø–∏—Å–∞–Ω–∏", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")):
                continue
            if len(l) < 6:
                continue
            # –±–µ—Ä—ë–º –ª–∏–±–æ –±—É–ª–ª–µ—Ç—ã, –ª–∏–±–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if l.lstrip().startswith(("‚Ä¢", "-", "*")) or l.endswith((".", "!", "?")):
                problems.append(l.lstrip("‚Ä¢-* ").strip())
            else:
                # –¥–æ–ø—É—Å—Ç–∏–º –∫–∞–∫ –≥–∏–ø–æ—Ç–µ–∑—É, –Ω–æ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 120
                problems.append(l.strip()[:120])
            if len(problems) >= 3:
                break
        problems_block = "\n".join(f"‚Ä¢ {p}" for p in problems) if problems else "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

        # 4) –∫–æ–º–∞–Ω–¥—ã: –∏—â–µ–º –¥–æ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        cmds = _pick_commands(lines, limit=5)
        commands_block = "\n".join(cmds) if cmds else "–ù–µ—Ç –∫–æ–º–∞–Ω–¥"

        return problems_block, commands_block
    
    
    @classmethod
    def _format_compact_recommendations(cls, text: str, max_length: int = 500) -> str:
        """–°–∂–∏–º–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç LLM, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–ª–∞–º–ª—è—Ç—å Mattermost"""
        if not text or text.strip() == "":
            return "‚Ä¢ –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if len(text) <= max_length:
            return text.strip()
        
        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        truncated = text[:max_length]
        last_space = truncated.rfind(' ')
        if last_space > max_length * 0.8:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
            truncated = truncated[:last_space]
        
        return truncated + "\n\n... üîé *–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ seed-agent.log*"
    
    @classmethod
    def get_severity_color(cls, severity: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥ –¥–ª—è severity"""
        return cls.SEVERITY_COLORS.get(severity.lower(), "#808080")
    
    @classmethod
    def format_system_status(cls, host: str, cpu_info: str, ram_info: str, disk_info: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)"""
        message = f"### üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã {host}\n\n"
        
        if cpu_info and cpu_info != "n/a":
            message += f"üñ•Ô∏è **CPU:** {cpu_info}\n"
        
        if ram_info and ram_info != "n/a":
            message += f"üß† **Memory:** {ram_info}\n"
        
        if disk_info:
            message += f"üíæ **Storage:**\n"
            for disk in disk_info:
                message += f"  ‚Ä¢ {disk}\n"
        
        return message
    
    @classmethod
    def disk_status(cls, path: str, used_gb: float, total_gb: float, 
                   percentage: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ"""
        if percentage > 90:
            icon = cls.STATUS_ICONS["critical"]
        elif percentage > 80:
            icon = cls.STATUS_ICONS["warning"]
        else:
            icon = cls.STATUS_ICONS["ok"]
            
        return f"{icon} {path}: {percentage:.0f}% ({used_gb:.1f}/{total_gb:.1f} GB)"
    
    @classmethod
    def system_summary(cls, cpu_info: str, ram_info: str, disk_info: List[str],
                      host: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        header = cls.header("System Status", host)
        
        lines = [header]
        
        # CPU
        if cpu_info and cpu_info != "n/a":
            lines.append(f"üñ•Ô∏è CPU: {cpu_info}")
        else:
            lines.append(f"üñ•Ô∏è CPU: n/a")
            
        # RAM 
        if ram_info and ram_info != "n/a":
            lines.append(f"üß† Memory: {ram_info}")
        else:
            lines.append(f"üß† Memory: n/a")
            
        # –î–∏—Å–∫–∏
        if disk_info:
            lines.append(f"üíæ Storage:")
            for disk in disk_info:
                lines.append(f"  {disk}")
        else:
            lines.append(f"üíæ Storage: n/a")
            
        return "\n".join(lines)
    
    @classmethod
    def friendly_advice(cls, situation: str, host: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏"""
        advice_map = {
            "disk_critical": [
                "–ö—Ä–∏—Ç–∏—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                "–û—á–∏—Å—Ç–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏: find /var/log -name '*.log' -mtime +7 -delete", 
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
            ],
            "disk_warning": [
                "–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è - –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä—ã: du -sh /* | sort -hr", 
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∏—Å–∫–∞"
            ],
            "low_resources": [
                "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ",
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"
            ],
            "no_data": [
                f"Telegraf –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {host} - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–∏—Å telegraf –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
            ]
        }
        
        advice_list = advice_map.get(situation, ["–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —à—Ç–∞—Ç–Ω–æ"])
        return cls.advice_section(advice_list)
    
    @classmethod
    def error_message(cls, error: str, context: str = "") -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""        
        msg = f"*S.E.E.D. Error*\n\n"
        msg += f"Details: {error}\n"
        
        if context:
            msg += f"Context: {context}\n"
            
        msg += "\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        
        return msg