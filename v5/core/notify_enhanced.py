# -*- coding: utf-8 -*-
"""
Enhanced SEED Agent v5 Notification System with Message Editing
–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ resolved alerts
"""
import asyncio
import json
import logging
from typing import Dict, Any, Optional
import httpx
from .config import Config
from .formatter import AlertMessageFormatter
from .message_tracker import MessageTracker

logger = logging.getLogger(__name__)


class EnhancedNotificationManager:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, config: Config, message_tracker: MessageTracker):
        self.config = config
        self.notification_config = config.notification_config
        self.message_tracker = message_tracker
        
        # Initialize backend configurations
        self.mattermost_config = self.notification_config.get("mattermost", {})
        self.slack_config = self.notification_config.get("slack", {})
        self.email_config = self.notification_config.get("email", {})
    
    async def send_mattermost_message(self, text: str, channel: Optional[str] = None, 
                                    severity: str = "info") -> Optional[str]:
        """Send message to Mattermost and return message_id for future editing"""
        if not self.mattermost_config.get("enabled") or not self.mattermost_config.get("webhook_url"):
            logger.debug("Mattermost not configured, skipping notification")
            return None
        
        channel = channel or self.mattermost_config.get("channel", "alerts")
        
        payload = {
            "username": self.mattermost_config.get("username", "üåå SEED"),
            "icon_emoji": self.mattermost_config.get("icon_emoji", ":crystal_ball:"),
            "attachments": [{
                "color": AlertMessageFormatter.get_severity_color(severity),
                "text": text,
                "mrkdwn_in": ["text"]
            }]
        }
        if self.mattermost_config.get("channel"):
            payload["channel"] = self.mattermost_config["channel"]
        
        try:
            timeout = httpx.Timeout(10.0)
            verify_ssl = self.mattermost_config.get("verify_ssl", True)
            
            async with httpx.AsyncClient(timeout=timeout, verify=verify_ssl) as client:
                response = await client.post(
                    self.mattermost_config["webhook_url"],
                    json=payload,
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ Mattermost message sent successfully to {channel}")
                    # TODO: Mattermost webhooks –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç message_id
                    # –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω Bot Token –∏ Posts API
                    return "webhook_message"
                else:
                    logger.error(f"‚ùå Mattermost API error: {response.status_code} - {response.text}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå Failed to send Mattermost message: {e}")
            return None
    
    def _create_resolved_message(self, original_message: str, alert_data: Dict[str, Any], 
                               llm_result: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç resolved —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ"""
        labels = alert_data.get("labels", {})
        alertname = labels.get("alertname", "Unknown Alert")
        instance = labels.get("instance", "unknown")
        
        # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ resolved –≤–µ—Ä—Å–∏—é
        resolved_emoji = "‚úÖ"
        if "üíéüî•" in original_message:
            resolved_emoji = "üíé‚úÖ"  # Critical resolved
        elif "‚öîÔ∏è" in original_message:
            resolved_emoji = "‚öîÔ∏è‚úÖ"  # High resolved  
        elif "üõ°Ô∏è" in original_message:
            resolved_emoji = "üõ°Ô∏è‚úÖ"  # Warning resolved
        elif "‚ú®" in original_message:
            resolved_emoji = "‚ú®‚úÖ"  # Info resolved
        
        # –°–æ–∑–¥–∞—ë–º resolved –≤–µ—Ä—Å–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è
        resolved_message = f"""üåå SEED
{resolved_emoji} {alertname} (RESOLVED)

üìç –°–µ—Ä–≤–µ—Ä: {instance}
‚è∞ Resolved: {alert_data.get('endsAt', 'just now')}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {alert_data.get('annotations', {}).get('summary', 'Alert resolved')}

‚úÖ **–°—Ç–∞—Ç—É—Å: –†–ê–ó–†–ï–®–ï–ù–û**

üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞
‚Ä¢ –£–±–µ–¥–∏—Å—å —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 15-30 –º–∏–Ω—É—Ç

üìä **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞:**
{original_message.split('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:')[1] if 'üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:' in original_message else '–°–º. –≤—ã—à–µ'}

‚Äî Powered by üåå SEED ‚úÖ"""
        
        return resolved_message
    
    async def send_alert_notification(self, alert_data: Dict[str, Any], llm_result: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏ resolved"""
        labels = alert_data.get("labels", {})
        annotations = alert_data.get("annotations", {})
        
        alertname = labels.get("alertname", "Unknown Alert") 
        instance = llm_result.get("instance", "unknown")
        severity = llm_result.get("severity", "unknown")
        status = alert_data.get("status", "firing")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        should_update, message_info = self.message_tracker.should_update_message(alert_data)
        
        if should_update and message_info:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è resolved alert
            logger.info(f"üîÑ Updating existing message for resolved alert: {alertname}")
            
            # –°–æ–∑–¥–∞—ë–º resolved –≤–µ—Ä—Å–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è
            resolved_message = self._create_resolved_message(
                message_info.get("message_text", ""), alert_data, llm_result
            )
            
            # TODO: –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
            # –ü–æ–∫–∞ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            update_message = f"üîÑ **UPDATE:** {resolved_message}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª
            channel = message_info.get("channel", "alerts")
            message_id = await self.send_mattermost_message(update_message, channel, "info")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
            self.message_tracker.cleanup_resolved_message(alert_data)
            
            logger.info(f"‚úÖ Updated message for resolved alert: {alertname}")
            return
        
        # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        notification_message = llm_result.get("message") or (
            f"*{alertname}* on `{instance}` (severity: {severity})"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Mattermost
        if self.mattermost_config.get("enabled"):
            channel = self.mattermost_config.get("channel", "alerts")
            message_id = await self.send_mattermost_message(notification_message, channel, severity)
            
            if message_id and status == "firing":
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self.message_tracker.store_message_info(
                    alert_data, channel, message_id, notification_message, severity
                )
        
        logger.info(f"üì§ Alert notification sent for {alertname}")