# seed/v1/plugins/mongo_hot.py
# -*- coding: utf-8 -*-
"""
SEED plugin: mongo_hot ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞ ¬´–≥–æ—Ä—è—á–∏—Ö¬ª –æ–ø–µ—Ä–∞—Ü–∏–π Mongo –∏–∑ system.profile.
–í—ã–≤–æ–¥ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ Mattermost (—ç–º–æ–¥–∑–∏ + –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏).
"""

import os
from typing import Dict, List, Any
from fetchers.fetch_mongo import aggregate  # –æ–±—ë—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ PyMongo.aggregate()

# --- —É—Ç–∏–ª–∏—Ç—ã ---------------------------------------------------------------

def _to_int(v, default=0) -> int:
    try:
        return int(v)
    except Exception:
        try:
            return int(float(v))
        except Exception:
            return default

def _to_float(v, default=0.0) -> float:
    try:
        return float(v)
    except Exception:
        return default

def _truncate(s: str, maxlen: int = 160) -> str:
    s = " ".join((s or "").split())
    return s if len(s) <= maxlen else s[: maxlen - 1] + "‚Ä¶"

# --- –æ—Å–Ω–æ–≤–Ω–æ–π —Ö—ç–Ω–¥–ª–µ—Ä ------------------------------------------------------

def run(host: str, payload: Dict) -> str:
    """
    payload:
      mongo_uri: "mongodb://user:pass@host:27017/?authSource=admin&connect=direct"
      db: "admin"
      min_ms: 50
      limit: 10
    """
    uri   = payload["mongo_uri"]
    db    = payload.get("db", "admin")
    minms = int(payload.get("min_ms", 50))
    limit = int(payload.get("limit", 10))

    pipeline: List[Dict[str, Any]] = [
        {"$match": {"ns": {"$exists": True}, "millis": {"$gte": minms}}},
        {
            "$project": {
                "ns": 1, "op": 1, "millis": 1,
                "docsExamined": 1, "keysExamined": 1, "nreturned": 1,
                "planSummary": 1, "command": 1
            }
        },
        {"$sort": {"millis": -1}},
        {"$limit": limit},
    ]

    docs = aggregate(uri, db, "system.profile", pipeline) or []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ
    header = f"üó° MONGO HOT SPOTS | üçÉ {host} | ‚è± {minms}ms | üîù{limit}"

    lines: List[str] = [header]

    for d in docs:
        ns   = str(d.get("ns", "?"))
        op   = str(d.get("op", "?"))
        ms   = _to_int(d.get("millis", 0))
        de   = _to_int(d.get("docsExamined", 0))
        ke   = _to_int(d.get("keysExamined", 0))
        nr   = _to_int(d.get("nreturned", 0))
        eff  = (_to_float(de) / _to_float(nr)) if (nr and de) else 0.0

        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ ns "<db>.<coll>"
        try:
            _, coll = ns.split(".", 1)
        except ValueError:
            coll = ns

        # compact line: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é
        # –ø—Ä–∏–º–µ—Ä:  üî• events ¬∑ find ¬∑ 153ms ¬∑ docs=2300 keys=120 ret=34 ¬∑ eff=67.6
        line = f"üî• {coll} ¬∑ {op} ¬∑ {ms}ms ¬∑ docs={de} keys={ke} ret={nr} ¬∑ eff={eff:.1f}"

        # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—ä–µ–∑–∂–∞–ª–∞—Å—å —à–∏—Ä–∏–Ω–∞ –≤ —á–∞—Ç–µ
        lines.append(_truncate(line, 160))

    if len(lines) == 1:
        lines.append("‚úÖ –≥–æ—Ä—è—á–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–æ—Ä–æ–≥ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω)")

    # –ö–æ—Ä–æ—Ç–∫–∏–π LLM-—Å–æ–≤–µ—Ç –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º USE_LLM
    try:
        if os.getenv("USE_LLM", "0") == "1":
            from core.llm import GigaChat
            ctx = f"topN={len(docs)}; min_ms={minms}"
            tip = GigaChat().ask(
                f"Mongo –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä ({ctx}). –î–∞–π 1‚Äì2 –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ —É—Å–∫–æ—Ä–µ–Ω–∏—é (–∏–Ω–¥–µ–∫—Å—ã/—Ñ–∏–ª—å—Ç—Ä—ã/–ª–∏–º–∏—Ç—ã). "
                f"–ü–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ, ‚â§120 —Å–∏–º–≤–æ–ª–æ–≤.",
                max_tokens=70
            )
            if tip:
                tip = " ".join(tip.strip().split())
                lines.append(f"üí° {tip}")
    except Exception as e:
        lines.append(f"_(LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e})_")

    return "\n".join(lines)