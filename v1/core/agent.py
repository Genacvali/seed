# -*- coding: utf-8 -*-
import json
from core.bus import consume
from core.config import load_settings, resolve_handler
from core.notifier import send_mm

def _on_alert(msg: bytes):
    try:
        alert = json.loads(msg.decode("utf-8"))
    except Exception:
        send_mm("SEED: ‚ö†Ô∏è –Ω–µ-JSON —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
        return
    # 1) —Ä–æ—É—Ç–∏–Ω–≥ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É ‚Üí –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ + payload-defaults
    plugin_name, payload = resolve_handler(alert)
    if not plugin_name:
        return send_mm(f"SEED: ü§∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è type='{alert.get('type')}'")
    # 2) –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–∑–æ–≤ –ø–ª–∞–≥–∏–Ω–∞
    try:
        mod = __import__(f"plugins.{plugin_name}", fromlist=["run"])
        text = mod.run(alert["host"], payload)   # –≤—Å–µ–≥–¥–∞ (host: str, payload: dict) -> str
        if text:
            send_mm(text)
    except Exception as e:
        send_mm(f"SEED: ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ `{plugin_name}`: {e}")

def main():
    load_settings()      # –∑–∞–≥—Ä—É–∑–∏–º –∫–æ–Ω—Ñ–∏–≥ –∏ –ø–ª–∞–≥–∏–Ω—ã –≤ –ø–∞–º—è—Ç—å
    consume(_on_alert)   # —Å–ª—É—à–∞–µ–º RabbitMQ –∏ –ø–µ—Ä–µ–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–ª–ª–±—ç–∫—É

if __name__ == "__main__":
    main()